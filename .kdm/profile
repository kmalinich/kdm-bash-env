# kdm bash-env
# .bash_profile

# shellcheck disable=SC1090


# Test for interactivity
[[ "${-}" == *"i"* ]] && export BASH_INTERACTIVE="true"

# Disable echo output
[[ "${BASH_INTERACTIVE}" ]] && stty -echo

# kdm bash-env variables
export BASH_ENV_DIR_KDM="${HOME}/.kdm"
export BASH_ENV_DIR_PROFILE_D="${BASH_ENV_DIR_KDM}/profile.d"

export BASH_ENV_DIR_CACHE="${BASH_ENV_DIR_KDM}/cache"
export BASH_ENV_FILE_CACHE_PATHS="${BASH_ENV_DIR_CACHE}/paths"


_initialPathGenerate() {
	local UNAME_VAL

	UNAME_VAL="$(uname)"

	# TODO: This feels.... not quite right
	USR_LOCAL_PATH='/usr/local/sbin:/usr/local/bin'
	if [[ "${UNAME_VAL}" == "Darwin" ]]; then
		if [[ "$(sysctl -n hw.optional.arm64 2> /dev/null || true)" == "1" ]]; then
			USR_LOCAL_PATH="/opt/homebrew/sbin:/opt/homebrew/bin:${USR_LOCAL_PATH}"
		fi
	fi

	PATH="${USR_LOCAL_PATH}:/usr/sbin:/usr/bin:/sbin:/bin"

	# Everything after this is macOS-only
	if [[ "${UNAME_VAL}" != "Darwin" ]]; then
		export PATH
		return 0
	fi

	# Detect if /usr/local (Intel) or /opt/homebrew (Apple Silicon) should be used as the prefix
	PREFIX_ARM="/opt/homebrew"
	PREFIX_X86="/usr/local"

	PREFIX="${PREFIX_X86}"
	if [[ "$(sysctl -n hw.optional.arm64 2> /dev/null || true)" == "1" ]]; then
		PREFIX="${PREFIX_ARM}"
	fi

	# Add GNU coreutils, findutils, and grep to PATH if macOS brew-installed package present
	ARRAY_DIR_GNU_UTILS=(
	"${PREFIX}/opt/coreutils/libexec/gnubin"
	"${PREFIX}/opt/findutils/libexec/gnubin"
	"${PREFIX}/opt/grep/libexec/gnubin"
	)

	unset PREFIX

	for DIR_GNU_UTIL in "${ARRAY_DIR_GNU_UTILS[@]}"; do
		[[ ! -d "${DIR_GNU_UTIL}" ]] && continue
		PATH="${DIR_GNU_UTIL}:${PATH}"
	done

	export PATH
}

_initialPathSetup() {
	# Generate initial path if paths cache empty
	if [[ ! -s "${BASH_ENV_FILE_CACHE_PATHS}" ]]; then
		_initialPathGenerate
		# If generation required, we're done here
		return 0
	fi

	# Source cached path file
	# shellcheck source=/dev/null
	. "${BASH_ENV_FILE_CACHE_PATHS}"
}


_initialPathSetup


# Initial plaintext loading message
# [[ "${BASH_INTERACTIVE}" && -t 0 ]] && echo -en "\\nLoading...\\r"

# Source data from ~/.kdm/profile.d
for FILE in $(find "${BASH_ENV_DIR_PROFILE_D}" -maxdepth 1 -name '[0-9][0-9]-*' -type f -executable | sort); do
	. "${FILE}"

	# For performance debugging
	# echo -n "${FILE},"
	# export TIMEFORMAT=$'%3R'
	# time . "${FILE}"
	# export TIMEFORMAT=$'%3R'
done; unset FILE

if [[ "${BASH_INTERACTIVE}" ]]; then
	# _show_motd

	# Re-enable echo output
	stty echo

	# [[ -t 0 ]] && echo -en "          \\r"
fi


# vim: set filetype=sh ts=2 sw=2 tw=0 noet :
