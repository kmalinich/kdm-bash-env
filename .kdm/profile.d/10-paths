# Configure MANPATH from array ARRAY_MANPATH
MANPATH_OLD="${MANPATH}"

# Find entries currently in MANPATH that are not present in ARRAY_MANPATH
for ENTRY in "${ARRAY_MANPATH[@]}"; do
	# If entry is not a directory, remove entry from MANPATH_OLD
	[[ ! -d "${ENTRY}" ]] && MANPATH_OLD="${MANPATH_OLD//:$ENTRY/}"

	# If entry already present in MANPATH_OLD (at any position), remove entry from MANPATH_OLD
	[[ "${MANPATH_OLD}" =~ (:|^)${ENTRY}(:|$) ]] && MANPATH_OLD="${MANPATH_OLD//:$ENTRY/}"
done

unset MANPATH
for ENTRY in "${ARRAY_MANPATH[@]}"; do
	# Skip entry if it is not a directory
	[[ ! -d "${ENTRY}" ]] && continue

	# If entry already present in MANPATH (at any position), remove entry from MANPATH
	[[ "${MANPATH}" =~ (:|^)${ENTRY}(:|$) ]] && MANPATH="${MANPATH//:$ENTRY/}"

	# Add entry to beginning of MANPATH
	MANPATH="${ENTRY}${MANPATH+:}${MANPATH}"
done

# Add what remains of MANPATH_OLD to beginning of MANPATH
MANPATH="${MANPATH_OLD}${MANPATH+:}${MANPATH}"
unset MANPATH_OLD



# Configure MIBDIRS from array ARRAY_MIBDIRS
MIBDIRS_OLD="${MIBDIRS}"

# Find entries currently in MIBDIRS that are not present in ARRAY_MIBDIRS
for ENTRY in "${ARRAY_MIBDIRS[@]}"; do
	# If entry is not a directory, remove entry from MIBDIRS_OLD
	[[ ! -d "${ENTRY}" ]] && MIBDIRS_OLD="${MIBDIRS_OLD//:$ENTRY/}"

	# If entry already present in MIBDIRS_OLD (at any position), remove entry from MIBDIRS_OLD
	[[ "${MIBDIRS_OLD}" =~ (:|^)${ENTRY}(:|$) ]] && MIBDIRS_OLD="${MIBDIRS_OLD//:$ENTRY/}"
done

unset MIBDIRS
for ENTRY in "${ARRAY_MIBDIRS[@]}"; do
	# Skip entry if it is not a directory
	[[ ! -d "${ENTRY}" ]] && continue

	# If entry already present in MIBDIRS (at any position), remove entry from MIBDIRS
	[[ "${MIBDIRS}" =~ (:|^)${ENTRY}(:|$) ]] && MIBDIRS="${MIBDIRS//:$ENTRY/}"

	# Add entry to beginning of MIBDIRS
	MIBDIRS="${ENTRY}${MIBDIRS+:}${MIBDIRS}"
done

# Add what remains of MIBDIRS_OLD to beginning of MIBDIRS
MIBDIRS="${MIBDIRS_OLD}${MIBDIRS+:}${MIBDIRS}"
unset MIBDIRS_OLD



# Configure NODE_PATH from array ARRAY_NODE_PATH
NODE_PATH_OLD="${NODE_PATH}"

# Find entries currently in NODE_PATH that are not present in ARRAY_NODE_PATH
for ENTRY in "${ARRAY_NODE_PATH[@]}"; do
	# If entry is not a directory, remove entry from NODE_PATH_OLD
	[[ ! -d "${ENTRY}" ]] && NODE_PATH_OLD="${NODE_PATH_OLD//:$ENTRY/}"

	# If entry already present in NODE_PATH_OLD (at any position), remove entry from NODE_PATH_OLD
	[[ "${NODE_PATH_OLD}" =~ (:|^)${ENTRY}(:|$) ]] && NODE_PATH_OLD="${NODE_PATH_OLD//:$ENTRY/}"
done

unset NODE_PATH
for ENTRY in "${ARRAY_NODE_PATH[@]}"; do
	# Skip entry if it is not a directory
	[[ ! -d "${ENTRY}" ]] && continue

	# If entry already present in NODE_PATH (at any position), remove entry from NODE_PATH
	[[ "${NODE_PATH}" =~ (:|^)${ENTRY}(:|$) ]] && NODE_PATH="${NODE_PATH//:$ENTRY/}"

	# Add entry to beginning of NODE_PATH
	NODE_PATH="${ENTRY}${NODE_PATH+:}${NODE_PATH}"
done

# Add what remains of NODE_PATH_OLD to beginning of NODE_PATH
NODE_PATH="${NODE_PATH_OLD}${NODE_PATH+:}${NODE_PATH}"
unset NODE_PATH_OLD



# Configure PATH from array ARRAY_PATH
PATH_OLD="${PATH}"

# Find entries currently in PATH that are not present in ARRAY_PATH
for ENTRY in "${ARRAY_PATH[@]}"; do
	# If entry is not a directory, remove entry from PATH_OLD
	[[ ! -d "${ENTRY}" ]] && PATH_OLD="${PATH_OLD//:$ENTRY/}"

	# If entry already present in PATH_OLD (at any position), remove entry from PATH_OLD
	[[ "${PATH_OLD}" =~ (:|^)${ENTRY}(:|$) ]] && PATH_OLD="${PATH_OLD//:$ENTRY/}"
done

unset PATH
for ENTRY in "${ARRAY_PATH[@]}"; do
	# Skip entry if it is not a directory
	[[ ! -d "${ENTRY}" ]] && continue

	# If entry already present in PATH (at any position), remove entry from PATH
	[[ "${PATH}" =~ (:|^)${ENTRY}(:|$) ]] && PATH="${PATH//:$ENTRY/}"

	# Add entry to beginning of PATH
	PATH="${ENTRY}${PATH+:}${PATH}"
done

# Add what remains of PATH_OLD to beginning of PATH
PATH="${PATH_OLD}${PATH+:}${PATH}"
unset PATH_OLD


# Export PATHs
export MANPATH MIBDIRS NODE_PATH PATH
export MIBS="ALL"


# Get full path to which binary
WHICHPATH="$(command -v which)"
export WHICHPATH


# vim: set filetype=sh ts=2 sw=2 tw=0 noet :
