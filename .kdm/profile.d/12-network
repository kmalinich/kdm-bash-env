# Get IP, TTY, and hostname so the binaries doesn't have to be run again, if the ip binary exists
if hash facter; then
	DEFROUTE_NIC="$(facter networking.primary)"
	HOST_IP="$(     facter "networking.interfaces.${DEFROUTE_NIC}.ip")"
else
	DEFROUTE_NIC="$(ip route | grep -Po '(?<=dev\ )(e(n|th|ns|np[1-9]s)|br|wlan)[0-9]{1,3}(?=(\s\sproto\ static)?(\s\smetric\ [1-9][0-9]{0,3})?\s?$)' | head -n 1)"
	[[ "${DEFROUTE_NIC}" ]] && HOST_IP=$(ip addr | grep -Po "(?<=inet\\ )([1-9]([0-9]{1,2})\\.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})(?=.*.[^vir]${DEFROUTE_NIC}$))")
fi

# Export variables
export DEFROUTE_NIC HOST_IP


# If we have a hostname file, use it; otherwise call the hostname binary
[[ -s /etc/hostname ]] && HOSTNAME_DATA="$(cat /etc/hostname)" || HOSTNAME_DATA="$(hostname -f)"

# Determine subdomain count
DOMAIN_COUNT="${HOSTNAME_DATA//[^.]}"
DOMAIN_COUNT="${#DOMAIN_COUNT}"

# Parse for domain
[[ "${DOMAIN_COUNT}" -ge "1" ]] && DOMAIN_FULL="$(echo "${HOSTNAME_DATA}" | cut -d '.' -f 2-)"
export DOMAIN_FULL="${DOMAIN_FULL-local}"

# Parse for hostname
export HOST_SHORT="${HOSTNAME_DATA%%.*}"
if [[ "${DOMAIN_COUNT}" -ge "3" ]]; then
	DOMAIN=$(echo "${HOSTNAME_DATA}" | cut -d '.' -f "${DOMAIN_COUNT}-")
	HOST_SUB="${HOST_SHORT}.${DOMAIN_FULL/\.${DOMAIN}/}"
fi

# Failstate catch
export HOST_SUB="${HOST_SUB-${HOST_SHORT}}"
export DOMAIN="${DOMAIN-local}"

# Populate ${HOSTNAME} environment variable if missing
export HOSTNAME="${HOSTNAME-${HOSTNAME_DATA}}"


# vim: set syntax=sh filetype=sh ts=2 sw=2 tw=0 noet :
