# Functions: Git

[[ "${_}" != "${0}" && "${SOURCE_VERBOSE}" == "true" ]] && output kv "Loaded" "${BASH_SOURCE[@]/$HOME\/\.kdm\//}"


# Show git process PIDs owned by this user
_g_pids() {
	pgrep -U "${UID}" -f 'git\ (checkout|fetch|gc|prune|pull|status|submodule)'
}


# Show Git-related info
_g_gi() {
	# Declare vars as local
	local BRANCH COMMIT CONFIG DIR HASH RELEASE TAG TAGS TOP URL

	BRANCH="$(git get-branch  2> /dev/null)"
	COMMIT="$(git get-commit  2> /dev/null)"
	DIR="$(   git get-gitdir  2> /dev/null)"
	TOP="$(   git get-repodir 2> /dev/null)"
	URL="$(   git get-url     2> /dev/null)"

	[[ -z "${BRANCH}" ]] && output error "No branch detected" && return
	[[ -z "${COMMIT}" ]] && output error "No commit detected" && return
	[[ -z "${DIR}"    ]] && output error "No repo detected"   && return
	[[ -z "${TOP}"    ]] && output error "No toplvl detected" && return
	[[ -z "${URL}"    ]] && output error "No URL detected"    && return

	CONFIG="${TOP}/${DIR}/config"
	[[ ! -s "${CONFIG}" ]] && output error "No config data detected" && return

	output orange "---------------------= git info =---------------------"
	output kv "    URL" "${URL}"
	output kv " Branch" "${BRANCH}"
	output kv "Top lvl" "${TOP/$HOME/\~}"
	output kv " Config" "${CONFIG/$HOME/\~}"
	output kv " Commit" "${COMMIT}"

	# Git tag-related data
	TAGS="$(git get-tags 2> /dev/null)"

	if [[ "${TAGS}" ]]; then
		HASH=$(    echo "${TAGS##v}" | awk -F '-' '{print $3}')
		TAG=$(     echo "${TAGS##v}" | awk -F '-' '{print $1}')
		RELEASE="$(echo "${TAGS##v}" | awk -F '-' '{print $2}').git${HASH##g}"

		[[ "${TAGS}" ]] && output kv "   Tags" "${TAGS}"
		[[ "${HASH}" ]] && output kv "   Hash" "${HASH}"
		[[ "${TAG}"  ]] && output kv "Version" "${TAG}"

		if [[ "${RELEASE}" && "${RELEASE}" != ".git" ]]; then
			output kv "Release" "${RELEASE}"
		fi
	fi
	echo

	_g_gs
}

# Git command wrapper for formatted output
_g_wrapper() {
	# Declare vars as local
	local CMD_EXIT GIT_CMD

	[[ -z "${1}" ]] && output error "No command provided to _g_wrapper" && return 254
	GIT_CMD="${1}"

	output orange "------------------= git ${GIT_CMD} =----------------------"
	git "${GIT_CMD}"
	CMD_EXIT="${?}"
	echo

	return "${CMD_EXIT}"
}

# Git status
_g_gs() {
	_g_wrapper s
}

# Git fetch, git pull, git update-all-the-submodules-to-latest
_g_gsu() {
	# Declare vars as local
	local CMD_EXIT TEMP_FILE

	# Generate temp file for output (until I learn how to do it without that)
	TEMP_FILE="$(mktemp)"

	git smup > "${TEMP_FILE}" 2>&1
	CMD_EXIT="${?}"

	if [[ -s "${TEMP_FILE}" ]]; then
		output orange "[${CMD_EXIT}] --------------------= git smup =-----------------------"
		cat "${TEMP_FILE}"
		echo
	fi

	rm -rf "${TEMP_FILE}" > /dev/null 2>&1
	[[ "${CMD_EXIT}" != "0" ]] && return "${CMD_EXIT}"

	_g_gs
	CMD_EXIT="${?}"
	return "${CMD_EXIT}"
}

# Git fetch, git pull
_g_gu() {
	# Declare vars as local
	local CMD_EXIT GIT_BRANCH TEMP_FILE

	GIT_BRANCH="$(git get-branch 2> /dev/null)"
	[[ -z "${GIT_BRANCH}" ]] && output error "No branch detected" && return

	_g_wrapper f
	CMD_EXIT="${?}"
	[[ "${CMD_EXIT}" != "0" ]] && return "${CMD_EXIT}"

	# Check if there is an update
	if [[ "$(git log "HEAD..origin/${GIT_BRANCH}" --oneline 2>&1)" ]]; then
		# Perform git pull
		_g_wrapper pull
		CMD_EXIT="${?}"
		[[ "${CMD_EXIT}" != "0" ]] && return "${CMD_EXIT}"
	else
		output blue "No git update available"
		echo
	fi

	# Generate temp file for output (until I learn how to do it without that)
	TEMP_FILE="$(mktemp)"

	git smi > "${TEMP_FILE}" 2>&1
	CMD_EXIT="${?}"

	if [[ -s "${TEMP_FILE}" ]]; then
		output orange "[${CMD_EXIT}] --------------------= git smp =-----------------------"
		cat "${TEMP_FILE}"
		echo
	fi

	rm -rf "${TEMP_FILE}" > /dev/null 2>&1
	[[ "${CMD_EXIT}" != "0" ]] && return "${CMD_EXIT}"

	_g_gs
	CMD_EXIT="${?}"
	return "${CMD_EXIT}"
}

# Git commit all w/message
_g_gca() {
	# Declare vars as local
	local COMMIT_MSG CMD_EXIT GIT_BRANCH TEMP_FILE USAGE_STRING

	USAGE_STRING="g-gca <commit message>"
	[[ -z "${1}" ]] && output usage "${USAGE_STRING}" && return
	COMMIT_MSG="${1}"

	if git diff-index --quiet HEAD --; then
		output blue "No changes to commit"
		return 1
	fi

	output kv "Committing changes, with message" "${COMMIT_MSG}"
	echo

	# Generate temp file for output (until I learn how to do it without that)
	TEMP_FILE="$(mktemp)"

	git cam "${COMMIT_MSG}" > "${TEMP_FILE}" 2>&1
	CMD_EXIT="${?}"

	if [[ -s "${TEMP_FILE}" ]]; then
		output orange "[${CMD_EXIT}] ------------= git cam '${COMMIT_MSG}' =----------------"
		cat "${TEMP_FILE}"
		echo
	fi

	rm -rf "${TEMP_FILE}" > /dev/null 2>&1

	if [[ "${CMD_EXIT}" == "0" ]]; then
		_g_gs
		CMD_EXIT="${?}"
	fi

	return "${CMD_EXIT}"
}

# Git push origin
_g_gpo() {
	# Declare vars as local
	local ARRAY_BRANCHES ARRAY_USAGE_OPTIONS CMD_EXIT LOG SELECTED_BRANCH TEMP_FILE USAGE_STRING

	# Array of branches
	ARRAY_BRANCHES=(
	current
	develop
	testing
	master
	production
	postprod
	)

	# Array of branch acronyms
	ARRAY_USAGE_OPTIONS=(c d t m p pp)

	case "${1}" in
		c)
			SELECTED_BRANCH="$(git get-branch 2> /dev/null)"
			if [[ -z "${SELECTED_BRANCH}" ]]; then
				output error "No current branch detected"
				return 1
			fi
			;;

		d)  SELECTED_BRANCH="develop"    ;;
		t)  SELECTED_BRANCH="testing"    ;;
		m)  SELECTED_BRANCH="master"     ;;
		p)  SELECTED_BRANCH="production" ;;
		pp) SELECTED_BRANCH="postprod"   ;;

		*)
			USAGE_STRING="g-gpo <$(IFS=$'|'; echo "${ARRAY_USAGE_OPTIONS[*]}")> <$(IFS=$'|'; echo "${ARRAY_BRANCHES[*]}")> <y>"
			output usage "${USAGE_STRING}"
			return 254
			;;
	esac

	# Bounce if:
	# git log exit code is 0
	# AND
	# There are no apparant pushable changes
	LOG="$(git log "origin/${SELECTED_BRANCH}.." --oneline 2> /dev/null)"
	# shellcheck disable=SC2181
	if [[ "${?}" == "0" && "$(echo "${LOG}" | wc -l)" == "0" ]]; then
		output blue "No changes to push"
		return 2
	fi

	output kv "Pushing to branch" "${SELECTED_BRANCH}"
	echo

	if [[ "${2##\-}" != [Yy] ]]; then
		read -r -p "Continue? [Y/n] " GIT_PUSH_YN
		echo

		if [[ "${GIT_PUSH_YN}" == [Nn] ]]; then
			output red "Push cancelled"
			return 253
		fi
	fi

	# Generate temp file for output (until I learn how to do it without that)
	TEMP_FILE="$(mktemp)"

	git psvo "${SELECTED_BRANCH}" > "${TEMP_FILE}" 2>&1
	CMD_EXIT="${?}"

	if [[ -s "${TEMP_FILE}" ]]; then
		output orange "[${CMD_EXIT}] ------= git psvo ${SELECTED_BRANCH} =----------"
		cat "${TEMP_FILE}"
		echo
	fi

	rm -rf "${TEMP_FILE}" > /dev/null 2>&1

	if [[ "${CMD_EXIT}" == "0" ]]; then
		_g_gs
		CMD_EXIT="${?}"
	fi

	return "${CMD_EXIT}"
}


# Function aliases
alias g-gca='_g_gca'
alias g-gi=' _g_gi'
alias g-gpo='_g_gpo'
alias g-gs=' _g_gs'
alias g-gsu='_g_gsu'
alias g-gu=' _g_gu'


# vim: set filetype=sh ts=2 sw=2 tw=0 noet :
