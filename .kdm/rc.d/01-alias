# shellcheck disable=SC1090

# Functions: Alias generation

[[ "${_}" != "${0}" && "${SOURCE_VERBOSE}" == "true" ]] && output kv "Loaded" "${BASH_SOURCE[@]/${HOME}\/\.kdm\//}"


# For newly spawned shells (Linux desktop)
export BASH_ENV_DIR_CACHE="${BASH_ENV_DIR_KDM}/cache"
export BASH_ENV_FILE_CACHE_ALIAS="${BASH_ENV_DIR_CACHE}/alias"


_export_dirs() {
	# Downloads and Desktop folder variables
	DIR_HOME_DC="${HOME}/Documents"
	DIR_HOME_DL="${HOME}/Downloads"
	DIR_HOME_DT="${HOME}/Desktop"

	[[ -d "${DIR_HOME_DC}" ]] && export DIR_HOME_DC
	[[ -d "${DIR_HOME_DL}" ]] && export DIR_HOME_DL
	[[ -d "${DIR_HOME_DT}" ]] && export DIR_HOME_DT
}

_export_eza() {
	# Check if eza is installed
	hash eza || return

	EZA_AS_LS='true'

	EXA_COLORS='da=38;5;255:uu=38;5;242:un=38;2;255;255;1'
	EZA_COLORS="${EXA_COLORS}"

	EXA_ICON_SPACING='2'

	export EZA_AS_LS EXA_COLORS EZA_COLORS EXA_ICON_SPACING EZA_ICON_SPACING
}

_export_ls() {
	export LS_TIME_STYLE='+%Y-%m-%d %r'
}

_exportSetup() {
	_export_dirs
	_export_eza
	_export_ls
}


_addAliasToFile() {
	echo "alias ${1}=\"${2}\"" >> "${BASH_ENV_FILE_CACHE_ALIAS}"
}


_alias_eza() {
	# Check if eza is installed
	hash eza || return

	_addAliasToFile ls 'eza --color=auto --color-scale --time-style long-iso --icons --links --group --group-directories-first 2> /dev/null'

	_addAliasToFile lll 'ls --all                           --classify --long'
	_addAliasToFile l. ' ls                     --list-dirs                   .*'
	_addAliasToFile ll. 'ls                     --list-dirs            --long .*'
	_addAliasToFile l1 ' ls                                 --classify        --oneline'
	_addAliasToFile l '  ls                                 --classify                   --grid'
	_addAliasToFile ll ' ls                                 --classify --long'
	_addAliasToFile lld 'ls                     --list-dirs --classify --long'

	# Because `eza` doesn't support traditional GNU `ls` `ls -tr` syntax, and I use it a lot
	# Also `eza` 'sort by modified date' is, by default, in reverse order compared to GNU `ls`,
	# hence the `llt` _addAliasToFile having the `--reverse` option and the `lltr` _addAliasToFile not
	_addAliasToFile llt ' ll --sort modified --reverse'
	_addAliasToFile lltr 'll --sort modified'

	# Output message if output function available and in a TTY
	if hash output; then
		[[ -n "${BASH_INTERACTIVE}" && "${SOURCE_VERBOSE}" != "true" ]] && output kvt "Generated" "eza aliases"
	fi
}

_alias_ls() {
	# Return if GNU grep not installed and not on Linux
	[[ -z "${MACOS_GNU}" && "${UNAME_KERNEL_NAME}" != "Linux" ]] && return

	# Return if eza is installed
	hash eza && return

	# shellcheck disable=SC2139
	_addAliasToFile ls "ls --color=if-tty --group-directories-first --time-style='${LS_TIME_STYLE}' 2> /dev/null"

	_addAliasToFile lll 'ls --all                          --file-type --human-readable -l'
	_addAliasToFile la ' ls       --almost-all'
	_addAliasToFile l. ' ls                    --directory                                 .*'
	_addAliasToFile ll. 'ls                    --directory                              -l .*'
	_addAliasToFile l1 ' ls                                --file-type --human-readable -1'
	_addAliasToFile l '  ls                                --file-type                     -C'
	_addAliasToFile ll ' ls                                --file-type --human-readable -l'
	_addAliasToFile lld 'ls                    --directory --file-type --human-readable -l'

	# Output message if output function available and in a TTY
	if hash output; then
		[[ -n "${BASH_INTERACTIVE}" && "${SOURCE_VERBOSE}" != "true" ]] && output kvt "Generated" "ls aliases"
	fi
}

# shellcheck disable=SC2139
_alias_grep() {
	# Bounce if GNU grep not installed and not on Linux
	[[ -z "${MACOS_GNU}" && "${UNAME_KERNEL_NAME}" != "Linux" ]] && return

	# grep config
	#     in a terminal : always enable/use color
	# NOT in a terminal : disable color
	local GREP_BASE="grep --color=if-tty --no-messages"

	declare -A ARRAY_GREP_CMDS=(
		[e]='extended-regexp'
		[f]='fixed-strings'
		[i]='ignore-case'
		[r]='recursive'
		[v]='invert-match'
	)

	# Regular grep
	_addAliasToFile grep "${GREP_BASE}"
	for GREP_CMD in "${!ARRAY_GREP_CMDS[@]}"; do
		_addAliasToFile "${GREP_CMD}grep" "${GREP_BASE} --${ARRAY_GREP_CMDS[${GREP_CMD}]}"
	done

	# Force enable/disable color
	_addAliasToFile cgrep ' grep --no-messages --color=always'
	_addAliasToFile ncgrep 'grep --no-messages --color=never'

	# zgrep
	if hash zgrep; then
		_addAliasToFile zgrep "z${GREP_BASE}"
		for GREP_CMD in "${!ARRAY_GREP_CMDS[@]}"; do
			_addAliasToFile "z${GREP_CMD}grep" "z${GREP_BASE} --${ARRAY_GREP_CMDS[${GREP_CMD}]}"
		done
	fi

	# xzgrep
	if hash xzgrep; then
		_addAliasToFile xzgrep "xz${GREP_BASE}"
		for GREP_CMD in "${!ARRAY_GREP_CMDS[@]}"; do
			_addAliasToFile "xz${GREP_CMD}grep" "xz${GREP_BASE} --${ARRAY_GREP_CMDS[${GREP_CMD}]}"
		done
	fi

	# Output message if output function available and in a TTY
	if hash output; then
		[[ -n "${BASH_INTERACTIVE}" && "${SOURCE_VERBOSE}" != "true" ]] && output kvt "Generated" "grep aliases"
	fi
}

# E-Z nmap commands
_alias_nmap() {
	# If it has nmap binary:
	# only open ports, grepable output, aggressive and verbose aliases
	hash nmap || return

	# nmap needs sudo if not root
	# First, add one for not aggressive one (but still verbose)
	if [[ "${UID}" != "0" ]]; then
		_addAliasToFile nmap 'sudo nmap --open'
		# nmap-v for very verbose scan
		_addAliasToFile nmap-v 'sudo nmap -vv --open'
		# nmap-a for aggressive scripting scan
		_addAliasToFile nmap-a 'sudo nmap -vv -A --open'
		return
	fi

	# already root, no need for sudo
	_addAliasToFile nmap 'nmap --open'
	# nmap-v for very verbose scan
	_addAliasToFile nmap-v 'nmap -vv --open'
	# nmap-a for aggressive scripting scan
	_addAliasToFile nmap-a 'nmap -vv -A --open'

	# Output message if output function available and in a TTY
	if hash output; then
		[[ -n "${BASH_INTERACTIVE}" && "${SOURCE_VERBOSE}" != "true" ]] && output kvt "Generated" "nmap aliases"
	fi
}

# ping command tweaks
# shellcheck disable=SC2139
_alias_ping() {
	# Declare vars as local
	local PING4_BINARY PING6_BINARY

	# ping commands, if ping is present
	if hash ping; then
		# Get full path to binary
		unalias ping > /dev/null 2>&1
		PING4_BINARY="$(command -v ping)"

		# ping-slow : normal (1.0 second interval)
		#      ping : fast   (0.5 second interval)
		# ping-fast : faster (0.1 second interval)
		_addAliasToFile ping      "${PING4_BINARY} -i 0.5"
		_addAliasToFile ping-fast "${PING4_BINARY} -i 0.1"
		_addAliasToFile ping-slow "${PING4_BINARY} -i 1.0"
	fi

	# ping6 commands, if ping6 is present
	if hash ping6; then
		# Get full path to binary
		unalias ping6 > /dev/null 2>&1
		PING6_BINARY="$(command -v ping6)"

		# ping6-slow : normal (1.0 second interval)
		#      ping6 : fast   (0.5 second interval)
		# ping6-fast : faster (0.1 second interval)
		_addAliasToFile ping6      "${PING6_BINARY} -i 0.5"
		_addAliasToFile ping6-fast "${PING6_BINARY} -i 0.1"
		_addAliasToFile ping6-slow "${PING6_BINARY} -i 1.0"
	fi

	# Output message if output function available and in a TTY
	if hash output; then
		[[ -n "${BASH_INTERACTIVE}" && "${SOURCE_VERBOSE}" != "true" ]] && output kvt "Generated" "Ping aliases"
	fi
}

_alias_diff() {
	local DIFF_VERSION

	# Diff enable auto color
	DIFF_VERSION="$(diff -v | grep -Eo '[3-9]\.[0-9]{1,2}$')"

	if [[ "${DIFF_VERSION/\./}" -ge "34" ]]; then
		_addAliasToFile diff 'diff --color=auto'
	fi

	# Custom diff:
	# Tabsize : 2 columns
	# Ignore tab expansion
	# Ignore trailing space
	# Ignore whitespace changes
	# Ignore blank lines
	_addAliasToFile kdiff 'diff --tabsize=2 --ignore-tab-expansion --ignore-trailing-space --ignore-space-change --ignore-blank-lines'

	# Output message if output function available and in a TTY
	if hash output; then
		[[ -n "${BASH_INTERACTIVE}" && "${SOURCE_VERBOSE}" != "true" ]] && output kvt "Generated" "diff aliases"
	fi
}


# shellcheck disable=SC2016
_alias_dirs() {
	# Downloads and Desktop folder variables
	DIR_HOME_DC="${HOME}/Documents"
	DIR_HOME_DL="${HOME}/Downloads"
	DIR_HOME_DT="${HOME}/Desktop"

	# Downloads and Desktop folder aliases
	[[ -d "${DIR_HOME_DC}" ]] && _addAliasToFile dc 'cd ${DIR_HOME_DC}; ll'
	[[ -d "${DIR_HOME_DL}" ]] && _addAliasToFile dl 'cd ${DIR_HOME_DL}; ll'
	[[ -d "${DIR_HOME_DT}" ]] && _addAliasToFile dt 'cd ${DIR_HOME_DT}; ll'

	# Output message if output function available and in a TTY
	if hash output; then
		[[ -n "${BASH_INTERACTIVE}" && "${SOURCE_VERBOSE}" != "true" ]] && output kvt "Generated" "Dir aliases"
	fi
}


_alias_misc() {
	# Newline after screen clear
	_addAliasToFile c 'clear'
	_addAliasToFile ccd 'cd; clear'
	_addAliasToFile cdc 'cd; clear'
	_addAliasToFile clear 'clear; echo'

	# Safety first on file operations
	_addAliasToFile rm 'rm -i'
	_addAliasToFile cp 'cp -iv'
	_addAliasToFile mv 'mv -i'
	_addAliasToFile mkdir 'mkdir -p'

	# Quick up-directory-n-list
	_addAliasToFile .. 'cd ..; ll'

	# Typo aliases
	_addAliasToFile bim 'vim'
	_addAliasToFile cim 'vim'
	_addAliasToFile ehco 'echo'
	_addAliasToFile grpe 'grep'
	_addAliasToFile kk 'll'
	_addAliasToFile namp 'nmap'
	_addAliasToFile pign 'ping'
	_addAliasToFile tial 'tail'

	# Pre-sorted environment variables
	_addAliasToFile env-sort 'env | sort -h'

	# Sort by IP address octets
	# .. fought to find this one for a long, long time
	_addAliasToFile sort-ip 'sort --field-separator="." --key="1,1g" --key="2,2g" --key="3,3g" --key="4,4g"'

	# Output message if output function available and in a TTY
	if hash output; then
		[[ -n "${BASH_INTERACTIVE}" && "${SOURCE_VERBOSE}" != "true" ]] && output kvt "Generated" "Misc aliases"
	fi
}


# Pretty print HTML with tidy, indent: 2 spaces, sorted alphabetically, then colorize with pygmentize
_alias_pygmentize_html() {
	hash tidy || return
	_addAliasToFile html-format "dos2unix | sed -e '/^$/d' -e 's/^[ \\t]*//' -e 's/\\t/\\ /g' | tr '\\n' ' ' | sed -E 's/>(\\ {1,})</></g' | tidy 2> /dev/null | html-beautify -t false -E -T -U | pygmentize -l html -f terminal16m -O style=monokai"
	_addAliasToFile format-html 'html-format'
}

# Pretty print JSON with jq, indent: 2 spaces (default), sorted alphabetically, then colorize with pygmentize
_alias_pygmentize_json() {
	hash jq || return
	_addAliasToFile json-format 'dos2unix | jq -MS . 2> /dev/null | pygmentize -l json -f terminal16m -O style=monokai'
	_addAliasToFile format-json 'json-format'
}

# Pretty print XML with xmllint, indent: 2 spaces (default), then colorize with pygmentize
_alias_pygmentize_xml() {
	hash xmllint || return
	_addAliasToFile xml-format 'dos2unix | xmllint --format - 2> /dev/null | pygmentize -l xml -f terminal16m -O style=monokai'
	_addAliasToFile format-xml 'xml-format'
}

# Prettyprint+colorize various formats, if supporting binaries are installed
# Get pygmentize with pip install pygments
_alias_pygmentize() {
	hash dos2unix   || return
	hash pygmentize || return

	_alias_pygmentize_html
	_alias_pygmentize_json
	_alias_pygmentize_xml

	# Output message if output function available and in a TTY
	if hash output; then
		[[ -n "${BASH_INTERACTIVE}" && "${SOURCE_VERBOSE}" != "true" ]] && output kvt "Generated" "pygmentize aliases"
	fi
}


# Generate SSH host aliases
_alias_ssh() {
	local ARRAY_SSH_HOSTS SSH_HOST

	mapfile -t ARRAY_SSH_HOSTS < <(awk -F ' ' '/^Host(\s){1,35}[a-z].*/ {print $2}' "${BASH_ENV_DIR_SSH_CONFIG}"/*.conf "${BASH_ENV_DIR_SSH_CONFIG}"/*.d/*.conf 2> /dev/null | grep -Ev '\*')

	for SSH_HOST in "${ARRAY_SSH_HOSTS[@]}"; do
		_addAliasToFile "${SSH_HOST}" "ssh ${SSH_HOST}"
	done

	# Output message if output function available and in a TTY
	if hash output; then
		[[ -n "${BASH_INTERACTIVE}" && "${SOURCE_VERBOSE}" != "true" ]] && output kvt "Generated" "SSH aliases"
	fi
}


_alias_sudo() {
	# First check if we're root; if so, we don't need sudo aliases
	[[ "${UID}" == "0" ]] && return

	# If we're on macOS, add the macOS commands to the base array
	# If we're on Linux, add the Linux commands to the base array
	case "${UNAME_KERNEL_NAME}" in
		Darwin) ARRAY_SUDO+=("${ARRAY_SUDO_MACOS[@]}") ;;
		Linux)  ARRAY_SUDO+=("${ARRAY_SUDO_LINUX[@]}") ;;
	esac

	# Process auto-sudo-alias generation
	for CMD in "${ARRAY_SUDO[@]}"; do
		# If it's installed, add sudo
		hash "${CMD}" || continue
		_addAliasToFile "${CMD}" "sudo ${CMD}"
	done

	# Output message if output function available and in a TTY
	if hash output; then
		[[ -n "${BASH_INTERACTIVE}" && "${SOURCE_VERBOSE}" != "true" ]] && output kvt "Generated" "sudo aliases"
	fi
}


# Process alias generation
_aliasGenerate() {
	_alias_eza
	_alias_ls
	_alias_grep
	_alias_nmap
	_alias_ping
	_alias_diff
	_alias_dirs
	_alias_misc
	_alias_pygmentize
	_alias_ssh
	_alias_sudo

	# Output message if output function available and in a TTY
	if hash output; then
		[[ -n "${BASH_INTERACTIVE}" && "${SOURCE_VERBOSE}" != "true" ]] && output kvt "Generated" "All aliases"
	fi

	# In-place unique sort
	sort --unique --output="${BASH_ENV_FILE_CACHE_ALIAS}" "${BASH_ENV_FILE_CACHE_ALIAS}"
}

# Configure aliases
_aliasSetup() {
	# Regenerate alias cache file if empty
	if [[ ! -s "${BASH_ENV_FILE_CACHE_ALIAS}" ]]; then
		_aliasGenerate

		# Source alias cache file
		. "${BASH_ENV_FILE_CACHE_ALIAS}"

		return 0
	fi


	# Declare vars as local
	local ALIAS_CACHE_AGE ALIAS_CACHE_TIME

	# Determine age of alias cache file
	if [[ -n "${MACOS_GNU}" || "${UNAME_KERNEL_NAME}" == "Linux" ]]; then
		ALIAS_CACHE_TIME=$(stat -c '%Y' "${BASH_ENV_FILE_CACHE_ALIAS}")
	else
		ALIAS_CACHE_TIME=$(stat -f '%m' "${BASH_ENV_FILE_CACHE_ALIAS}")
	fi

	ALIAS_CACHE_AGE=$(($(date +%s)-ALIAS_CACHE_TIME))

	# Output message if output function available and in a TTY
	if hash output; then
		[[ -n "${BASH_INTERACTIVE}" && "${SOURCE_VERBOSE}" != "true" ]] && output kvt "Alias cache age" "${ALIAS_CACHE_AGE}"
	fi

	# Regenerate alias cache file if older than 1 day
	if [[ "${ALIAS_CACHE_AGE}" -ge "86400" ]]; then
		_aliasGenerate
	fi

	# Source alias cache file
	. "${BASH_ENV_FILE_CACHE_ALIAS}"
}


_exportSetup
_aliasSetup


alias alias-generate='_aliasGenerate'


# vim: set filetype=sh ts=2 sw=2 tw=0 noet :
