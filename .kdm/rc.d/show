# Functions: Show

[[ "${_}" != "${0}" && "${SOURCE_VERBOSE}" == "true" ]] && output kv "Loaded" "${BASH_SOURCE[@]/$HOME\/\.kdm\//}"


# Check if an executable exists, if so, show info about it
_show_bin() {
	# Declare vars as local
	local FILE_ALIAS FILE_MIME FILE_PATH FILE_TYPE LS

	if ! hash "${1}"; then
		output error "Could not find '${1}' in defined PATH"
		return 1
	fi

	# Get any potential aliases
	FILE_ALIAS="$(alias "${1}" 2> /dev/null | awk -F "'" '{printf $2}')"

	# Get full file path, type, and MIME encoding/type
	! FILE_PATH="$("${WHICHPATH}" --skip-alias --skip-functions "${1}" 2> /dev/null)" && FILE_PATH="$("${WHICHPATH}" "${1}" 2> /dev/null)"

	FILE_TYPE="$(file -bNn                             "${FILE_PATH}" 2> /dev/null | head -n 1)"
	FILE_MIME="$(file -bNn --mime-encoding --mime-type "${FILE_PATH}" 2> /dev/null | head -n 1)"

	# Detect GNU ls or stock macOS ls to enable color output properly
	LS=('ls' '-Fhl')
	if [[ "${MACOS_GNU}" || "${UNAME_KERNEL_NAME}" == "Linux" ]]; then
		LS+=('--color=auto')
	else
		LS+=('-G')
	fi

	"${LS[@]}" "${FILE_PATH}" 2> /dev/null
	echo

	output kvt " Name" "${1}"
	[[ "${FILE_ALIAS}" ]] && output kvo "Alias" "${FILE_ALIAS}"
	[[ "${FILE_PATH}"  ]] && output kv  " Path" "${FILE_PATH}"
	[[ "${FILE_TYPE}"  ]] && output kvc " Type" "${FILE_TYPE}"
	[[ "${FILE_MIME}"  ]] && output kvc " MIME" "${FILE_MIME}"

	return 0
}

# Show a clock
_show_clock() {
	# Declare vars as local
	local DATE_FMT PF_FMT

	# Date command format
	DATE_FMT="+%F %R:%S %:z (%a %b %d %Y %r %Z)"

	# Show a continuous clock if 1st arg is '-l'
	if [[ "${1}" != "-l" ]]; then
		printf "%s\\n" "$(date "${DATE_FMT}")"
		return
	fi

	PF_FMT="%s   \\r"

	# Auto activate/deactivate iTerm2 stealth if kdm helper script available
	if hash _iterm2 && [[ "${1}" == "-l" ]]; then
		_iterm2 stealth on
		trap "_iterm2 stealth off" SIGINT
	fi

	# Reset SECONDS var
	SECONDS="0"

	while true; do
		printf "${PF_FMT}" "[${SECONDS}] $(date "${DATE_FMT}")"
		sleep 0.9
	done
}

# Show full path for SCPing
_show_scp_path() {
	# Declare vars as local
	local FILE_NAME SCP_CMD SCP_PATH SELECTED

	# If no argument, select current directory
	SELECTED="${PWD}"
	[[ "${1}" ]] && SELECTED="${1}"

	# Check if file exists
	[[ ! -e "${SELECTED}" ]] && output error "'./${1}' is not a valid file" && return

	# Get realpath of argument, and then swap out the home directory with a tilde
	SELECTED="$(realpath "${SELECTED}")"
	SCP_PATH="${SELECTED/$HOME/\~}"

	# Check if argument is a file or folder, fill variables accordingly
	if [[ -d "${SELECTED}" ]]; then
		FILE_NAME="${SCP_PATH}"
		SCP_CMD="scp -r"
	else
		FILE_NAME="$(basename "${SCP_PATH}")"
		SCP_CMD="scp"
	fi

	echo
	output purple "Download ${FILE_NAME} from ${HOST_SHORT}:"

	printf "${SCP_CMD} ${C_ENV}${USER}@${HOST_SHORT}${C_RST}:${C_BLU}${SCP_PATH}${C_RST} .\\n"
	printf "${SCP_CMD} ${C_ENV}${USER}@${HOSTNAME}${C_RST}:${C_BLU}${SCP_PATH}${C_RST} .\\n"
	printf "${SCP_CMD} ${C_ENV}${USER}@${HOST_IP}${C_RST}:${C_BLU}${SCP_PATH}${C_RST} .\\n"
	echo

	# Output upload instructions if file is a directory
	[[ ! -d "${SELECTED}" ]] && return

	output purple "Upload \${FILE} to ${HOST_SHORT}:${SCP_PATH}/ (fill in the blank variable)"

	printf "${C_CYN}FILE${C_RST}=${C_YLW}\"\"; ${C_RST}scp ${C_PRP}-r ${C_YLW}\"${C_PRP}\${FILE}${C_YLW}\"${C_RST} ${C_ENV}${USER}@${HOST_SHORT}${C_RST}:${C_BLU}${SCP_PATH}/${C_RST}\\n"
	printf "${C_CYN}FILE${C_RST}=${C_YLW}\"\"; ${C_RST}scp ${C_PRP}-r ${C_YLW}\"${C_PRP}\${FILE}${C_YLW}\"${C_RST} ${C_ENV}${USER}@${HOSTNAME}${C_RST}:${C_BLU}${SCP_PATH}/${C_RST}\\n"
	printf "${C_CYN}FILE${C_RST}=${C_YLW}\"\"; ${C_RST}scp ${C_PRP}-r ${C_YLW}\"${C_PRP}\${FILE}${C_YLW}\"${C_RST} ${C_ENV}${USER}@${HOST_IP}${C_RST}:${C_BLU}${SCP_PATH}/${C_RST}\\n"
	echo
}

# Show most frequently executed commands
_show_top_cmds() {
	# Declare vars as local
	local COUNT HIST_CMDS HIST_TEMP

	if [[ ! -s "${HISTFILE}" ]]; then
		output error "bash history file missing or empty"
		return 1
	fi

	# Create temporary file for processing
	HIST_TEMP="$(mktemp)"

	# Remove timestamp marker lines or comments
	grep --invert-match --text '#' "${HISTFILE}" >> "${HIST_TEMP}"

	# Number of total commands in bash history
	HIST_CMDS="$(wc -l < "${HIST_TEMP}")"

	# Number of commands to show, default 15
	COUNT="${1-15}"

	output stderr "-- ${HIST_CMDS} commands total -------------------- Top ${COUNT} --"
	grep --invert-match --text '#' "${HISTFILE}" | sort | uniq -c | sort -rn | head -n "${COUNT}"

	if ! rm -f "${HIST_TEMP}" > /dev/null 2>&1; then
		output error "Failed to remove temporary bash history file '${HIST_TEMP}'"
		return 2
	fi

	return 0
}


# Function aliases
alias show-bin='     _show_bin'
alias showbin='      _show_bin'
alias show-clock='   _show_clock'
alias show-scp-path='_show_scp_path'
alias show-top-cmds='_show_top_cmds'


# vim: set filetype=sh ts=2 sw=2 tw=0 noet :
