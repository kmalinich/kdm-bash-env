# Functions: Conversion

[[ "${_}" != "${0}" && "${SOURCE_VERBOSE}" == "true" ]] && o k "Loaded" "${BASH_SOURCE[@]/$HOME\/\.kdm\//}"

# Convert hexadecimal<->decimal
dechex() {
	# Declare vars as local
	local DEC HEX INPUT OUTPUT PROCESS USAGE_STRING

	USAGE_STRING="dechex[hexdec] <(hexi)decimal number> [-s, script output]"
	[[ -z "${1}" ]] && o u "${USAGE_STRING}" && return

	# Uppercase input
	INPUT="${1^^}"

	# Bounce if first letter is anything other than A-F0-9
	case "${INPUT:0:1}" in
		[^A-F0-9])
			o e "Invalid input"
			return 1
			;;
	esac

	# Strip input of anything other than A-F, X, or numbers
	INPUT="${INPUT//[^A-FX0-9]/}"

	# Detect input type
	if [[ "${INPUT}" =~ ^0X[A-F0-9]? || "${INPUT}" =~ [A-F] ]]; then
		# Input is hexadecimal
		PROCESS="h2d"

		# Remove possible '0X'
		INPUT="${INPUT//0X/}"
		# Re-add '0x'
		INPUT="0x${INPUT}"

		# Bounce if invalid input
		if [[ "${#INPUT}" == "2" ]]; then
			o e "Invalid input"
			return 2
		fi

		# Render decimal value
		DEC="$((INPUT))"
	else
		# Input is decimal
		PROCESS="d2h"
		DEC="${INPUT}"
	fi

	# Render formatted hex value
	HEX="$(printf '0x%02X' "${INPUT}")"

	# Format decimal value if value is not "0"
	if [[ "${DEC}" != "0" ]]; then
		DEC="${DEC##+(0)}"    # Remove leading zeros
		DEC="${DEC//[^0-9]/}" # Remove non-numbers

		# Bounce if invalid input
		if [[ "${#DEC}" == "0" ]]; then
			o e "Invalid input"
			return 3
		fi
	fi

	if [[ "${2}" != "-s" ]]; then
		o grn "[${PROCESS}] | ${DEC} | ${HEX}"
		return
	fi

	case "${PROCESS}" in
		d2h) OUTPUT="${HEX/0x/}" ;;
		h2d) OUTPUT="${DEC}"     ;;
	esac

	echo "${OUTPUT}"
}


# Function aliases
alias hexdec='dechex'


# vim: set filetype=sh ts=2 sw=2 tw=0 noet :
