# Functions: Alias generation

[[ "${_}" != "${0}" && "${SOURCE_VERBOSE}" == "true" ]] && output kv "Loaded" "${BASH_SOURCE[@]/$HOME\/\.kdm\//}"


_alias_eza() {
	# Check if eza is installed
	hash eza || return

	EZA_AS_LS='true'

	EXA_COLORS='da=38;5;255:uu=38;5;242:un=38;2;255;255;1'
	EZA_COLORS="${EXA_COLORS}"

	EXA_ICON_SPACING='2'
	EZA_ICON_SPACING="${EZA_ICON_SPACING}"

	export EZA_AS_LS EXA_COLORS EZA_COLORS EXA_ICON_SPACING EZA_ICON_SPACING


	alias ls='eza --color=auto --color-scale --time-style long-iso --icons --links --group --group-directories-first 2> /dev/null'

	alias lll='ls --all                           --classify --long'
	alias l.=' ls                     --list-dirs                   .*'
	alias ll.='ls                     --list-dirs            --long .*'
	alias l1=' ls                                 --classify        --oneline'
	alias l='  ls                                 --classify                   --grid'
	alias ll=' ls                                 --classify --long'
	alias lld='ls                     --list-dirs --classify --long'

	# Because `eza` doesn't support traditional GNU `ls` `ls -tr` syntax, and I use it a lot
	# Also `eza` 'sort by modified date' is, by default, in reverse order compared to GNU `ls`,
	# hence the `llt` alias having the `--reverse` option and the `lltr` alias not
	alias llt=' ll --sort modified --reverse'
	alias lltr='ll --sort modified'
}

_alias_ls() {
	export LS_TIME_STYLE='+%Y-%m-%d %r'

	# Return if GNU grep not installed and not on Linux
	[[ -z "${MACOS_GNU}" && "${UNAME_KERNEL_NAME}" != "Linux" ]] && return

	# Return if eza is installed
	hash eza && return

	# shellcheck disable=SC2139
	alias ls="ls --color=if-tty --group-directories-first --time-style='${LS_TIME_STYLE}' 2> /dev/null"

	alias lll='ls --all                          --file-type --human-readable -l'
	alias la=' ls       --almost-all'
	alias l.=' ls                    --directory                                 .*'
	alias ll.='ls                    --directory                              -l .*'
	alias l1=' ls                                --file-type --human-readable -1'
	alias l='  ls                                --file-type                     -C'
	alias ll=' ls                                --file-type --human-readable -l'
	alias lld='ls                    --directory --file-type --human-readable -l'
}

# shellcheck disable=SC2139
_alias_grep() {
	# Bounce if GNU grep not installed and not on Linux
	[[ -z "${MACOS_GNU}" && "${UNAME_KERNEL_NAME}" != "Linux" ]] && return

	# grep config
	#     in a terminal : always enable/use color
	# NOT in a terminal : disable color
	local GREP_BASE="grep --color=if-tty --no-messages"

	declare -A ARRAY_GREP_CMDS=(
		[e]='extended-regexp'
		[f]='fixed-strings'
		[i]='ignore-case'
		[r]='recursive'
		[v]='invert-match'
	)

	# Regular grep
	alias grep="${GREP_BASE}"
	for GREP_CMD in "${!ARRAY_GREP_CMDS[@]}"; do
		alias "${GREP_CMD}grep"="${GREP_BASE} --${ARRAY_GREP_CMDS[$GREP_CMD]}"
	done

	# Force enable/disable color
	alias cgrep=' grep --no-messages --color=always'
	alias ncgrep='grep --no-messages --color=never'

	# zgrep
	if hash zgrep; then
		alias zgrep="z${GREP_BASE}"
		for GREP_CMD in "${!ARRAY_GREP_CMDS[@]}"; do
			alias "z${GREP_CMD}grep"="z${GREP_BASE} --${ARRAY_GREP_CMDS[$GREP_CMD]}"
		done
	fi

	# xzgrep
	if hash xzgrep; then
		alias xzgrep="xz${GREP_BASE}"
		for GREP_CMD in "${!ARRAY_GREP_CMDS[@]}"; do
			alias "xz${GREP_CMD}grep"="xz${GREP_BASE} --${ARRAY_GREP_CMDS[$GREP_CMD]}"
		done
	fi
}

# E-Z nmap commands
_alias_nmap() {
	# If it has nmap binary:
	# only open ports, grepable output, aggressive and verbose aliases
	hash nmap || return

	# nmap needs sudo if not root
	# First, add one for not aggressive one (but still verbose)
	if [[ "${UID}" != "0" ]]; then
		alias nmap='sudo nmap --open'
		# nmap-v for very verbose scan
		alias nmap-v='sudo nmap -vv --open'
		# nmap-a for aggressive scripting scan
		alias nmap-a='sudo nmap -vv -A --open'
		return
	fi

	# already root, no need for sudo
	alias nmap='nmap --open'
	# nmap-v for very verbose scan
	alias nmap-v='nmap -vv --open'
	# nmap-a for aggressive scripting scan
	alias nmap-a='nmap -vv -A --open'
}

# ping command tweaks
# shellcheck disable=SC2139
_alias_ping() {
	# Declare vars as local
	local PING4_BINARY PING6_BINARY

	# ping commands, if ping is present
	if hash ping; then
		# Get full path to binary
		PING4_BINARY=$(command -v ping)

		# ping-slow : normal (1.0 second interval)
		#      ping : fast   (0.5 second interval)
		# ping-fast : faster (0.1 second interval)
		alias ping="     ${PING4_BINARY} -i 0.5"
		alias ping-fast="${PING4_BINARY} -i 0.1"
		alias ping-slow="${PING4_BINARY} -i 1.0"
	fi

	# ping6 commands, if ping6 is present
	if hash ping6; then

		# Get full path to binary
		PING6_BINARY=$(command -v ping6)

		# ping6-slow : normal (1.0 second interval)
		#      ping6 : fast   (0.5 second interval)
		# ping6-fast : faster (0.1 second interval)
		alias ping6="     ${PING6_BINARY} -i 0.5"
		alias ping6-fast="${PING6_BINARY} -i 0.1"
		alias ping6-slow="${PING6_BINARY} -i 1.0"
	fi
}

_alias_diff() {
	# Diff enable auto color
	DIFF_VERSION="$(diff -v | grep -Eo '[3-9]\.[0-9]{1,2}$')"
	if [[ "${DIFF_VERSION/\./}" -ge "34" ]]; then
		alias diff='diff --color=auto'
	fi

	# Custom diff:
	# Tabsize : 2 columns
	# Ignore tab expansion
	# Ignore trailing space
	# Ignore whitespace changes
	# Ignore blank lines
	alias kdiff='diff --tabsize=2 --ignore-tab-expansion --ignore-trailing-space --ignore-space-change --ignore-blank-lines'
}

_alias_dirs() {
	# Downloads and Desktop folder variables
	DIR_HOME_DC="${HOME}/Documents"
	DIR_HOME_DL="${HOME}/Downloads"
	DIR_HOME_DT="${HOME}/Desktop"

	# Downloads and Desktop folder aliases
	[[ -d "${DIR_HOME_DC}" ]] && export DIR_HOME_DC && alias dc='cd ${DIR_HOME_DC}; ll'
	[[ -d "${DIR_HOME_DL}" ]] && export DIR_HOME_DL && alias dl='cd ${DIR_HOME_DL}; ll'
	[[ -d "${DIR_HOME_DT}" ]] && export DIR_HOME_DT && alias dt='cd ${DIR_HOME_DT}; ll'
}

_alias_misc() {
	# Newline after screen clear
	alias c='clear'
	alias ccd='cd; clear'
	alias cdc='cd; clear'
	alias clear='clear; echo'

	# Safety first on file operations
	alias rm='rm -i'
	alias cp='cp -iv'
	alias mv='mv -i'
	alias mkdir='mkdir -p'

	# Quick up-directory-n-list
	alias ..='cd ..; ll'

	# Typo aliases
	alias bim='vim'
	alias cim='vim'
	alias ehco='echo'
	alias grpe='grep'
	alias kk='ll'
	alias namp='nmap'
	alias pign='ping'
	alias tial='tail'

	# Pre-sorted environment variables
	alias env-sort='env | sort -h'

	# Sort by IP address octets
	# .. fought to find this one for a long, long time
	alias sort-ip='sort --field-separator="." --key="1,1g" --key="2,2g" --key="3,3g" --key="4,4g"'
}


# Pretty print HTML with tidy, indent: 2 spaces, sorted alphabetically, then colorize with pygmentize
_alias_pygmentize_html() {
	hash tidy || return
	alias html-format="dos2unix | sed -e '/^$/d' -e 's/^[ \\t]*//' -e 's/\\t/\\ /g' | tr '\\n' ' ' | sed -E 's/>(\\ {1,})</></g' | tidy 2> /dev/null | html-beautify -t false -E -T -U | pygmentize -l html -f terminal16m -O style=monokai"
	alias format-html='html-format'
}

# Pretty print JSON with jq, indent: 2 spaces (default), sorted alphabetically, then colorize with pygmentize
_alias_pygmentize_json() {
	hash jq || return
	alias json-format='dos2unix | jq -MS . 2> /dev/null | pygmentize -l json -f terminal16m -O style=monokai'
	alias format-json='json-format'
}

# Pretty print XML with xmllint, indent: 2 spaces (default), then colorize with pygmentize
_alias_pygmentize_xml() {
	hash xmllint || return
	alias xml-format='dos2unix | xmllint --format - 2> /dev/null | pygmentize -l xml -f terminal16m -O style=monokai'
	alias format-xml='xml-format'
}

# Prettyprint+colorize various formats, if supporting binaries are installed
# Get pygmentize with pip install pygments
_alias_pygmentize() {
	hash dos2unix   || return
	hash pygmentize || return

	_alias_pygmentize_html
	_alias_pygmentize_json
	_alias_pygmentize_xml
}


_alias_eza
_alias_ls
_alias_grep
_alias_nmap
_alias_ping
_alias_diff
_alias_dirs
_alias_misc
_alias_pygmentize


# vim: set filetype=sh ts=2 sw=2 tw=0 noet :
