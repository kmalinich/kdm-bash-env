# Functions: macOS-only (regardless of GNU conversion)

# Bounce if we're not on Darwin
[[ "${UNAME_KERNEL_NAME}" != "Darwin" ]] && return 0


[[ "${_}" != "${0}" && "${SOURCE_VERBOSE}" == "true" ]] && output kv "Loaded" "${BASH_SOURCE[@]/$HOME\/\.kdm\//}"


# PING_WAIT for use in ping functions
export PING_WAIT="-t 1"


# Hostname change function
_macos_hostname() {
	# Declare vars as local
	local USAGE_STRING

	USAGE_STRING="hostname-macos <new hostname>"
	[[ -z "${1}" ]] && output usage "${USAGE_STRING}" && return

	_macos_scutil_set "ComputerName"  "${1}"
	_macos_scutil_set "HostName"      "${1}"
	_macos_scutil_set "LocalHostName" "${1%%.*}"

	output green "Hostname set to '${1}' / '${1%%.*}'"
}


# Fake lsusb function
_macos_lsusb() {
	# Check dependencies
	if ! hash jq; then
		output error "Could not detect jq binary, try 'brew install jq'"
		return
	fi

	if ! hash plist-to-json; then
		output error "Could not detect plist-to-json binary, try 'npm -g i plist-to-json'"
		return
	fi

	if ! hash system_profiler; then
		output error "Could not detect system_profiler binary, try running macOS"
		return
	fi

	# "bsd_name"
	# "file_system"
	# "free_space"
	# "free_space_in_bytes"
	# "mount_point"
	# "partition_map_type"
	# "removable_media"
	# "size_in_bytes"
	# "smart_status"
	# "volume_uuid"

	jq ".[0][0].items[0].items | ${1-.}" <(
		plist-to-json <(
			sudo system_profiler -xml 'SPUSBDataType' 2> /dev/null | sed -E -e 's/\s{1,}<\//<\//g' -e 's/\ \ /\ /g'
		) | sed \
			-e 's/"_items"/"items"/g'                        \
			-e 's/"_name"/"name"/g'                          \
			-e 's/"full_speed"/"full"/g'                     \
			-e 's/"low_speed"/"low"/g'                       \
			-e 's/"high_speed"/"high"/g'                     \
			-e 's/"super_speed"/"super"/g'                   \
			-e 's/"attrib_No"/false/g'                       \
			-e 's/"attrib_Off"/false/g'                      \
			-e 's/"attrib_On"/true/g'                        \
			-e 's/"attrib_Yes"/true/g'                       \
			-e 's/"bcd_device"/"bcdDevice"/g'                \
			-e 's/"Built-in_Device"/"builtIn"/g'             \
			-e 's/"bus_power"/"busPower"/g'                  \
			-e 's/"bus_power_used"/"busPowerUsed"/g'         \
			-e 's/"device_speed"/"deviceSpeed"/g'            \
			-e 's/"extra_current_used"/"extraCurrentUsed"/g' \
			-e 's/"host_controller"/"hostController"/g'      \
			-e 's/"location_id"/"locationId"/g'              \
			-e 's/"pci_device"/"pciDevice"/g'                \
			-e 's/"pci_revision"/"pciRevision"/g'            \
			-e 's/"pci_vendor"/"pciVendor"/g'                \
			-e 's/"product_id"/"productId"/g'                \
			-e 's/"serial_num"/"serialNumber"/g'             \
			-e 's/"vendor_id"/"vendorId"/g'                  \
			-e 's/"No"/false/g' -e 's/"no"/false/g'          \
			-e 's/"yes"/true/g' -e 's/"Yes"/true/g'
	)
}


_volume_cmd() {
	osascript -e "set volume ${1}"
}

_volume_set() {
	_volume_cmd "output volume ${1}"
}

# Volume config function
_macos_volume() {
	# Declare vars as local
	local ARRAY_USAGE_OPTIONS USAGE_OPTIONS_STRING VOLUME_CLEAN VOLUME_CURRENT VOLUME_MUTE

	# Array of options
	ARRAY_USAGE_OPTIONS=(
	max
	up
	down
	'[0-100]'
	)

	# Create variable of pipe-separated options from array
	USAGE_OPTIONS_STRING="$(IFS=$'|'; echo "${ARRAY_USAGE_OPTIONS[*]}")"

	VOLUME_CURRENT="$(osascript -e '    output volume of (get volume settings)')"
	VOLUME_MUTE="$(   osascript -e 'get output muted  of (get volume settings)')"

	# Make sure it's doesn't have any missing values
	if [[ "${VOLUME_CURRENT}" == *"missing"* || "${VOLUME_MUTE}" == *"missing"* ]]; then
		output error "Unable to detect current volume"
		return
	fi

	if [[ -z "${1}" ]]; then
		output usage  "volume <${USAGE_OPTIONS_STRING}>"
		1>&2 echo     "        volume <mute>"
		echo

		output kv "Current volume" "${VOLUME_CURRENT}%"
		output kv "   Mute status" "${VOLUME_MUTE}"
		return
	fi

	case "${1}" in
		mute)
			if [[ "${VOLUME_MUTE}" == "false" ]]; then
				_volume_cmd 'with output muted'
				output red "Volume muted"
				return
			fi

			_volume_cmd 'without output muted'
			output green "Volume unmuted"
			;;

		max)
			_volume_set '100'
			output green "Volume set to 100%"
			;;

		up)
			if [[ "${VOLUME_CURRENT}" -lt "95" ]]; then
				_volume_set "$((VOLUME_CURRENT+5))"
				output green "Volume set to $((VOLUME_CURRENT+5))%"
				return
			fi

			if [[ "${VOLUME_CURRENT}" -ge "95" && "${VOLUME_CURRENT}" -lt "100" ]]; then
				_volume_set '100'
				output green "Volume set to 100%"
				return
			fi

			output red "Volume is already set to ${VOLUME_CURRENT}%"
			;;

		down)
			if [[ "${VOLUME_CURRENT}" -gt "5" ]]; then
				_volume_set "$((VOLUME_CURRENT-5))"
				output green "Volume set to $((VOLUME_CURRENT-5))%"
				return
			fi

			if [[ "${VOLUME_CURRENT}" -le "5" && "${VOLUME_CURRENT}" -gt "0" ]]; then
				_volume_set '0'
				output green "Volume set to 0%"
				return
			fi

			output red "Volume is already set to ${VOLUME_CURRENT}%"
			;;

		*)
			VOLUME_CLEAN="${1//[^0-9]}"
			if [[ "${#VOLUME_CLEAN}" == "0" || "${#VOLUME_CLEAN}" -gt "100" ]]; then
				output red "Invalid volume entered"
				return
			fi

			_volume_set "${VOLUME_CLEAN}"
			output green "Volume set to ${VOLUME_CLEAN}%"
			;;
	esac

	# Play volume change sound effect
	# VOLUME_SOUND_EFFECT="/System/Library/LoginPlugins/BezelServices.loginPlugin/Contents/Resources/volume.aiff"
	# {
	# 	afplay "${VOLUME_SOUND_EFFECT}" & disown
	# } &> /dev/null
}

# Show listening ports a bit easier
_macos_net_listening() {
	# Declare vars as local
	local FILE_TEMP

	FILE_TEMP="$(mktemp)"

	echo "Protocol,Port,PID" >> "${FILE_TEMP}"

	for PROTOCOL in tcp udp; do
		for ADDR_FAMILY in inet inet6; do
			# output keyval "Listening ports" "${PROTOCOL}/${ADDR_FAMILY}"
			# sudo netstat -anv -f "${ADDR_FAMILY}" -p "${PROTOCOL}" | awk '/^(tc|ud)p(4|6).*.LISTEN/{print $4}' | sort
			sudo netstat -anv -f "${ADDR_FAMILY}" -p "${PROTOCOL}" | awk '/^(tcp(4|6|46).*.LISTEN)|(udp(4|6|46))/ {print $4 "," $1 "," $9}' | sed -r -e 's/^(\b[0-9]{1,3}\.){3}[0-9]{1,3}\b'// -e 's/^\.//g' -e 's/^\*\.//g' -e 's/^\:\:1\.//g' -e 's/^fe80\:\:.*.\.//g' | awk -F ',' '{print $2 "," $1 "," $3}' | sort --field-separator="," --key="1,1g" --key="2,2g" --key="3,3g" >> "${FILE_TEMP}"

		done
	done

	tty-table --options-compact=true < "${FILE_TEMP}"

	rm -f "${FILE_TEMP}"

	# TODO
	# Do something with this:
	#
	# mapfile -t ARRAY_IPV4_TCP_PORTS < <(sudo netstat -anv -f inet  -p tcp | awk '/^(tcp(4|6|46).*.LISTEN)|(udp(4|6|46))/ {print $4}' | sed -r -e 's/^(\b[0-9]{1,3}\.){3}[0-9]{1,3}\b'// -e 's/^\.//g' -e 's/^\*\.//g' -e 's/^\:\:1\.//g' -e 's/^fe80\:\:.*.\.//g' | sort -g)
	# mapfile -t ARRAY_IPv6_TCP_PORTS < <(sudo netstat -anv -f inet6 -p tcp | awk '/^(tcp(4|6|46).*.LISTEN)|(udp(4|6|46))/ {print $4}' | sed -r -e 's/^(\b[0-9]{1,3}\.){3}[0-9]{1,3}\b'// -e 's/^\.//g' -e 's/^\*\.//g' -e 's/^\:\:1\.//g' -e 's/^fe80\:\:.*.\.//g' | sort -g)
	# mapfile -t ARRAY_IPV4_UDP_PORTS < <(sudo netstat -anv -f inet  -p udp | awk '/^(tcp(4|6|46).*.LISTEN)|(udp(4|6|46))/ {print $4}' | sed -r -e 's/^(\b[0-9]{1,3}\.){3}[0-9]{1,3}\b'// -e 's/^\.//g' -e 's/^\*\.//g' -e 's/^\:\:1\.//g' -e 's/^fe80\:\:.*.\.//g' | sort -g)
	# mapfile -t ARRAY_IPv6_UDP_PORTS < <(sudo netstat -anv -f inet6 -p udp | awk '/^(tcp(4|6|46).*.LISTEN)|(udp(4|6|46))/ {print $4}' | sed -r -e 's/^(\b[0-9]{1,3}\.){3}[0-9]{1,3}\b'// -e 's/^\.//g' -e 's/^\*\.//g' -e 's/^\:\:1\.//g' -e 's/^fe80\:\:.*.\.//g' | sort -g)
	#
	# for IPV4_TCP_PORT in "${ARRAY_IPV4_TCP_PORTS[@]}"; do
	# sudo lsof +c 500 -i "4TCP:${PORT}"
	# echo
	# done
	#
	# for IPV6_TCP_PORT in "${ARRAY_IPV6_TCP_PORTS[@]}"; do
	# sudo lsof +c 500 -i "6TCP:${PORT}"
	# echo
	# done
	#
	# for IPV4_UDP_PORT in "${ARRAY_IPV4_UDP_PORTS[@]}"; do
	# sudo lsof +c 500 -i "4UDP:${PORT}"
	# echo
	# done
	#
	# for IPV6_UDP_PORT in "${ARRAY_IPV6_UDP_PORTS[@]}"; do
	# sudo lsof +c 500 -i "6UDP:${PORT}"
	# echo
	# done

	# Example:
	#
	# $ sudo lsof +c 500 -n -i 6TCP:22
	# COMMAND PID USER   FD   TYPE             DEVICE SIZE/OFF NODE NAME
	# launchd   1 root    7u  IPv6 0x8d41eb06a0b68403      0t0  TCP *:ssh (LISTEN)
	# launchd   1 root   10u  IPv6 0x8d41eb06a0b68403      0t0  TCP *:ssh (LISTEN)
}

_macos_notify() {
	# Declare vars as local
	local NOTIFY_MESSAGE NOTIFY_SUBTITLE NOTIFY_TITLE USAGE_STRING

	NOTIFY_TITLE="${1}"
	NOTIFY_MESSAGE="${2}"
	NOTIFY_SUBTITLE="${3}"

	USAGE_STRING="notify <title> <message> [<subtitle>]"
	[[ -z "${NOTIFY_TITLE}" || -z "${NOTIFY_MESSAGE}" ]] && output usage "${USAGE_STRING}" && return

	# Add subtitle to osascript string if present
	[[ "${NOTIFY_SUBTITLE}" ]] && NOTIFY_SUBTITLE="subtitle \"${NOTIFY_SUBTITLE}\""

	osascript -e "display notification \"${NOTIFY_MESSAGE}\" with title \"${NOTIFY_TITLE}\" ${NOTIFY_SUBTITLE}"
}

_macos_scutil_set() {
	sudo scutil --set "${1}" "${2}"
}

# JSON version of system_profiler
_macos_system_profiler() {
	# Declare vars as local
	local USAGE_STRING

	# Check dependencies
	if ! hash jq; then
		output error "Could not detect jq binary, try 'brew install jq'"
		return
	fi

	if ! hash plist-to-json; then
		output error "Could not detect plist-to-json binary, try 'npm -g i plist-to-json'"
		return
	fi

	if ! hash system_profiler; then
		output error "Could not detect system_profiler binary, try running macOS"
		return
	fi

	# Check argument
	USAGE_STRING="system-profiler <data type (name only, no SP prefix or DataType suffix)>"
	[[ -z "${1}" ]] && output usage "${USAGE_STRING}" && return

	plist-to-json <(sudo system_profiler -xml "SP${1}DataType" 2> /dev/null | sed -E -e 's/\s{1,}<\//<\//g' -e 's/\ \ /\ /g') | sed -e 's/"attrib_Yes"/true/g' -e 's/"attrib_No"/false/g' -e 's/"attrib_On"/true/g' -e 's/"attrib_Off"/false/g' -e 's/"_items"/"items"/g' -e 's/"_name"/"name"/g' | jq -S '.[][].items'
}

# List formatted system_profiler data types
_macos_system_profiler_list() {
	>&2 output blue "Available data types:"
	>&2 echo
	sudo system_profiler -listDataTypes | grep -Ev 'Available Datatypes:' | sed -e 's/^SP//g' -e 's/DataType$//g' | sort -df
}

# E-Z copy file into pasteboard (clipboard)
_macos_pb_copy() {
	# Declare vars as local
	local FILE_TEMP

	if [[ ! -s "${1}" ]]; then
		output error "'${1}' is not present or is empty"
		return 1
	fi

	FILE_TEMP="$(mktemp)"

	# Remove empty or whitespace-only leading and trailing lines
	sed -e ':a' -e '/[^[:blank:]]/,$!d; /^[[:space:]]*$/{ $d; N; ba' -e '}' "${1}" > "${FILE_TEMP}"

	# If EOL is not present, good to go (pbcopy adds it back)
	if ! tail -n 1 "${FILE_TEMP}" | read -r _; then
		if ! pbcopy < "${1}"; then
			output error "Failed to copy contents of '${1}' to pasteboard"
			rm -f "${FILE_TEMP}"
			return 2
		fi

		output keyval-t "Pasteboard filled with contents of" "${1}"
		rm -f "${FILE_TEMP}"
		return 0
	fi

	# If EOL is present, remove it (pbcopy adds it back)
	if ! head -c -1 "${FILE_TEMP}" | pbcopy; then
		output error "Failed to copy contents of '${1}' to pasteboard"
		rm -f "${FILE_TEMP}"
		return 3
	fi

	output keyval-t "Pasteboard filled with contents of" "${1}"
	rm -f "${FILE_TEMP}"
	return 0
}


# EFI partition mount for disk0 - disk5
for NUM in {0..5}; do
	DSK="disk${NUM}s1"
	PATH_DSK="/dev/${DSK}"
	PATH_MNT="/Volumes/${DSK}"

	[[ ! -b "${PATH_DSK}" ]] && continue

	# shellcheck disable=SC2139
	# shellcheck disable=SC2140
	alias "efi-mount-${NUM}"="sudo mkdir ${PATH_MNT} && diskutil mount -mountPoint ${PATH_MNT} ${PATH_DSK} && cd ${PATH_MNT}"
done

# Fake lspci
if ! hash lspci > /dev/null 2>&1; then
	if hash dspci > /dev/null 2>&1; then
		alias lspci='dspci'
	fi
fi

# Fake lsusb
alias lsusb='_macos_lsusb'

# Clear font cache
if hash atsutil; then
	alias fix-fontcache='sudo atsutil databases -remove'
fi

# Lock screen and screensaver shortcuts
alias screen-off='  pmset displaysleepnow'
alias screen-lock=' /System/Library/CoreServices/Menu\ Extras/User.menu/Contents/Resources/CGSession -suspend'
alias screen-saver='open -a ScreenSaverEngine'

alias sleep-system="osascript -e 'tell app \"System Events\" to sleep'"


# 14 : Yosemite
# 15 : El Capitan
# 16 : Sierra
# 17 : High Sierra
# 18 : Mojave
# 19 : ?
# 20 : ?
# 21 : Monterey
# 22 : Ventura
case "${UNAME_KERNEL_RELEASE%%.*}" in
	1[5-9]) ;&
	2[0-3])
		# Enable and disable indexing
		alias indexing-enable=' sudo mdutil -a -i on'
		alias indexing-disable='sudo mdutil -a -i off'

		# Flush DNS cache
		alias fix-dns="sudo dscacheutil -flushcache; sudo killall -HUP mDNSResponder; echo | sudo tee -a /etc/hosts > /dev/null; sudo sed -i '$ d' /etc/hosts"
	;;
esac


# Function aliases
alias copy='_macos_pb_copy'

alias hostname-macos='_macos_hostname'

alias net-listening='_macos_net_listening'

alias notify='      _macos_notify'
alias notify-macos='_macos_notify'

alias scutil-set='_macos_scutil_set'

alias system-profiler='     _macos_system_profiler'
alias system-profiler-list='_macos_system_profiler_list'

alias volume='_macos_volume'


# vim: set filetype=sh ts=2 sw=2 tw=0 noet :
