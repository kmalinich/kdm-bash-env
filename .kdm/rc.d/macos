# Functions: macOS-only (regardless of GNU conversion)

# Bounce if we're not on Darwin
[[ "${UNAME_KERNEL_NAME}" != "Darwin" ]] && return 0


[[ "${_}" != "${0}" && "${SOURCE_VERBOSE}" == "true" ]] && output kv "Loaded" "${BASH_SOURCE[@]/$HOME\/\.kdm\//}"


# PING_WAIT for use in ping functions
export PING_WAIT="-t 1"


# Hostname change function
_macos_hostname() {
	# Declare vars as local
	local USAGE_STRING

	USAGE_STRING="hostname-macos <new hostname>"
	[[ -z "${1}" ]] && output usage "${USAGE_STRING}" && return

	_macos_scutil_set "ComputerName"  "${1}"
	_macos_scutil_set "HostName"      "${1}"
	_macos_scutil_set "LocalHostName" "${1%%.*}"

	output green "Hostname set to '${1}' / '${1%%.*}'"
}


_itunes_cmd() {
	osascript -e 'tell application "iTunes"' -e "${1}" -e 'end tell' 2> /dev/null
}

_itunes_get() {
	osascript -e 'tell application "iTunes"' -e "get ${1} of current track" -e 'end tell' 2> /dev/null
}

# iTunes control
_macos_itunes_control() {
	# Declare vars as local
	local ARRAY_USAGE_OPTIONS USAGE_OPTIONS_STRING USAGE_STRING

	# Array of options
	ARRAY_USAGE_OPTIONS=(
	next
	pause
	play
	prev
	)

	# Create variable of pipe-separated options from array
	USAGE_OPTIONS_STRING="$(IFS=$'|'; echo "${ARRAY_USAGE_OPTIONS[*]}")"

	USAGE_STRING="itunes <${USAGE_OPTIONS_STRING}>"

	case "${1}" in
		pause|play) _itunes_cmd "playpause"  && output green "Playback toggled" ;;
		next)       _itunes_cmd "next track" && output green "Skipped next"     ;;
		prev)       _itunes_cmd "back track" && output green "Skipped previous" ;;

		*)
			output usage "${USAGE_STRING}"
			return
	esac

	_macos_itunes
}

# iTunes information
_macos_itunes() {
	# Declare vars as local
	local ITUNES_ALBUM ITUNES_ARTIST ITUNES_KIND ITUNES_NA ITUNES_NAME ITUNES_STATE

	ITUNES_ALBUM="$( _itunes_get 'album')"
	ITUNES_ARTIST="$(_itunes_get 'artist')"
	ITUNES_KIND="$(  _itunes_get 'kind')"
	ITUNES_NAME="$(  _itunes_get 'name')"
	ITUNES_STATE="$( _itunes_get 'album')"

	ITUNES_NA="Not available"

	[[ -z "${ITUNES_ALBUM}"  ]] && ITUNES_ALBUM="${ITUNES_NA}"
	[[ -z "${ITUNES_ARTIST}" ]] && ITUNES_ARTIST="${ITUNES_NA}"
	[[ -z "${ITUNES_KIND}"   ]] && ITUNES_KIND="${ITUNES_NA}"
	[[ -z "${ITUNES_NAME}"   ]] && ITUNES_NAME="${ITUNES_NA}"
	[[ -z "${ITUNES_STATE}"  ]] && ITUNES_STATE="${ITUNES_NA}"

	output purple "--------= Currently ${ITUNES_STATE} =--------"
	echo

	output kv "  Name" "${ITUNES_NAME-Nothing}"
	output kv "Artist" "${ITUNES_ARTIST-Nothing}"
	output kv " Album" "${ITUNES_ALBUM-Nothing}"
	output kv "  Kind" "${ITUNES_KIND-Nothing}"
}

# Fake lsusb function
_macos_lsusb() {
	# Check dependencies
	if ! hash jq; then
		output error "Could not detect jq binary, try 'brew install jq'"
		return
	fi

	if ! hash plist-to-json; then
		output error "Could not detect plist-to-json binary, try 'npm -g i plist-to-json'"
		return
	fi

	if ! hash system_profiler; then
		output error "Could not detect system_profiler binary, try running macOS"
		return
	fi

	# "bsd_name"
	# "file_system"
	# "free_space"
	# "free_space_in_bytes"
	# "mount_point"
	# "partition_map_type"
	# "removable_media"
	# "size_in_bytes"
	# "smart_status"
	# "volume_uuid"

	jq '.[0][0].items[0].items' <(
		plist-to-json <(
			sudo system_profiler -xml 'SPUSBDataType' 2> /dev/null | sed -E -e 's/\s{1,}<\//<\//g' -e 's/\ \ /\ /g'
		) | sed \
			-e 's/"_items"/"items"/g'                        \
			-e 's/"_name"/"name"/g'                          \
			-e 's/"full_speed"/"full"/g'                     \
			-e 's/"low_speed"/"low"/g'                       \
			-e 's/"high_speed"/"high"/g'                     \
			-e 's/"super_speed"/"super"/g'                   \
			-e 's/"attrib_No"/false/g'                       \
			-e 's/"attrib_Off"/false/g'                      \
			-e 's/"attrib_On"/true/g'                        \
			-e 's/"attrib_Yes"/true/g'                       \
			-e 's/"bcd_device"/"bcdDevice"/g'                \
			-e 's/"Built-in_Device"/"builtIn"/g'             \
			-e 's/"bus_power"/"busPower"/g'                  \
			-e 's/"bus_power_used"/"busPowerUsed"/g'         \
			-e 's/"device_speed"/"deviceSpeed"/g'            \
			-e 's/"extra_current_used"/"extraCurrentUsed"/g' \
			-e 's/"host_controller"/"hostController"/g'      \
			-e 's/"location_id"/"locationId"/g'              \
			-e 's/"pci_device"/"pciDevice"/g'                \
			-e 's/"pci_revision"/"pciRevision"/g'            \
			-e 's/"pci_vendor"/"pciVendor"/g'                \
			-e 's/"product_id"/"productId"/g'                \
			-e 's/"serial_num"/"serialNumber"/g'             \
			-e 's/"vendor_id"/"vendorId"/g'                  \
			-e 's/"No"/false/g' -e 's/"no"/false/g'          \
			-e 's/"yes"/true/g' -e 's/"Yes"/true/g'
	)
}


_volume_cmd() {
	osascript -e "set volume ${1}"
}

_volume_set() {
	_volume_set "set volume output volume ${1}"
}

# Volume config function
_macos_volume() {
	# Declare vars as local
	local ARRAY_USAGE_OPTIONS USAGE_OPTIONS_STRING VOLUME_CLEAN VOLUME_CURRENT VOLUME_MUTE

	# Array of options
	ARRAY_USAGE_OPTIONS=(
	max
	up
	down
	'[0-100]'
	)

	# Create variable of pipe-separated options from array
	USAGE_OPTIONS_STRING="$(IFS=$'|'; echo "${ARRAY_USAGE_OPTIONS[*]}")"

	VOLUME_CURRENT="$(osascript -e '    output volume of (get volume settings)')"
	VOLUME_MUTE="$(   osascript -e 'get output muted  of (get volume settings)')"

	# Make sure it's doesn't have any missing values
	if [[ "${VOLUME_CURRENT}" == *"missing"* || "${VOLUME_MUTE}" == *"missing"* ]]; then
		output error "Unable to detect current volume"
		return
	fi

	if [[ -z "${1}" ]]; then
		output usage  "volume <${USAGE_OPTIONS_STRING}>"
		1>&2 echo     "        volume <mute>"
		echo

		output kv "Current volume" "${VOLUME_CURRENT}%"
		output kv "   Mute status" "${VOLUME_MUTE}"
		return
	fi

	case "${1}" in
		mute)
			if [[ "${VOLUME_MUTE}" == "false" ]]; then
				_volume_cmd 'with output muted'
				output red "Volume muted"
				return
			fi

			_volume_cmd 'without output muted'
			output green "Volume unmuted"
			;;

		max)
			_volume_set '100'
			output green "Volume set to 100%"
			;;

		up)
			if [[ "${VOLUME_CURRENT}" -lt "95" ]]; then
				_volume_set "$((VOLUME_CURRENT+5))"
				output green "Volume set to $((VOLUME_CURRENT+5))%"
				return
			fi

			if [[ "${VOLUME_CURRENT}" -ge "95" && "${VOLUME_CURRENT}" -lt "100" ]]; then
				_volume_set '100'
				output green "Volume set to 100%"
				return
			fi

			output red "Volume is already set to ${VOLUME_CURRENT}%"
			;;

		down)
			if [[ "${VOLUME_CURRENT}" -gt "5" ]]; then
				_volume_set "$((VOLUME_CURRENT-5))"
				output green "Volume set to $((VOLUME_CURRENT-5))%"
				return
			fi

			if [[ "${VOLUME_CURRENT}" -le "5" && "${VOLUME_CURRENT}" -gt "0" ]]; then
				_volume_set '0'
				output green "Volume set to 0%"
				return
			fi

			output red "Volume is already set to ${VOLUME_CURRENT}%"
			;;

		*)
			VOLUME_CLEAN="${1//[^0-9]}"
			if [[ "${#VOLUME_CLEAN}" == "0" || "${#VOLUME_CLEAN}" -gt "100" ]]; then
				output red "Invalid volume entered"
				return
			fi

			_volume_set "${VOLUME_CLEAN}"
			output green "Volume set to ${VOLUME_CLEAN}%"
			;;
	esac

	# Play volume change sound effect
	# VOLUME_SOUND_EFFECT="/System/Library/LoginPlugins/BezelServices.loginPlugin/Contents/Resources/volume.aiff"
	# {
	# 	afplay "${VOLUME_SOUND_EFFECT}" & disown
	# } &> /dev/null
}

# Reset all Office Mac 2011 files
_macos_fix_office_2011() {
	# Declare vars as local
	local ARRAY_RESET_FILES PTH_AS PTH_CHE PTH_LIB PTH_PRF RESET_YN

	# Check if they're sure
	read -r -p "Are you sure? [Y/n] " RESET_YN
	echo
	[[ "${RESET_YN}" == [Nn] ]] && output purple "No changes" && return

	PTH_LIB="${HOME}/Library"
	PTH_AS="${PTH_LIB}/Application Support"
	PTH_CHE="${PTH_LIB}/Caches"
	PTH_PRF="${PTH_LIB}/Preferences"

	ARRAY_RESET_FILES=(
	"${HOME}/Documents/Microsoft User Data"
	"${PTH_AS}/CrashReporter/Microsoft"*
	"${PTH_AS}/Microsoft"
	"${PTH_AS}/com.apple.sharedfilelist/com.apple.LSSharedFileList.ApplicationRecentDocuments/com.microsoft."*
	"${PTH_CHE}/Microsoft"
	"${PTH_CHE}/com.apple.helpd/Generated/com.microsoft."*
	"${PTH_CHE}/com.apple.helpd/SDMHelpData/Other/English/HelpSDMIndexFile/com.microsoft."*
	"${PTH_CHE}/com.microsoft."*
	"${PTH_PRF}/Microsoft"
	"${PTH_PRF}/com.microsoft."*
	)

	output red "Resetting all Microsoft Office data"
	rm -rf "${ARRAY_RESET_FILES[@]}"

	defaults delete com.microsoft.Outlook &> /dev/null
	killall -9 cfprefsd                   &> /dev/null

	output green "Complete; you should reboot, preferably"
}

# Show listening ports a bit easier
_macos_net_listening() {
	local FILE_TEMP

	FILE_TEMP="$(mktemp)"

	sudo netstat -an | grep -E "^tcp4.*.LISTEN" | awk '{print $4}' | sort > "${FILE_TEMP}"

	for IP_VER in 4 6; do
		output keyval "Listening ports" "IPv${IP_VER}"
		netstat -an | grep -E "^..p${IP_VER}.*.LISTEN" | awk '{print $4}' | sort
		[[ "${IP_VER}" == "4" ]] && echo
	done

	rm -f "${FILE_TEMP}"
}

_macos_notify() {
	# Declare vars as local
	local NOTIFY_MESSAGE NOTIFY_SUBTITLE NOTIFY_TITLE USAGE_STRING

	NOTIFY_TITLE="${1}"
	NOTIFY_MESSAGE="${2}"
	NOTIFY_SUBTITLE="${3}"

	USAGE_STRING="notify <title> <message> [<subtitle>]"
	[[ -z "${NOTIFY_TITLE}" || -z "${NOTIFY_MESSAGE}" ]] && output usage "${USAGE_STRING}" && return

	# Add subtitle to osascript string if present
	[[ "${NOTIFY_SUBTITLE}" ]] && NOTIFY_SUBTITLE="subtitle \"${NOTIFY_SUBTITLE}\""

	osascript -e "display notification \"${NOTIFY_MESSAGE}\" with title \"${NOTIFY_TITLE}\" ${NOTIFY_SUBTITLE}"
}

_macos_scutil_set() {
	sudo scutil --set "${1}" "${2}"
}

# JSON version of system_profiler
_macos_system_profiler() {
	# Declare vars as local
	local USAGE_STRING

	# Check dependencies
	if ! hash jq; then
		output error "Could not detect jq binary, try 'brew install jq'"
		return
	fi

	if ! hash plist-to-json; then
		output error "Could not detect plist-to-json binary, try 'npm -g i plist-to-json'"
		return
	fi

	if ! hash system_profiler; then
		output error "Could not detect system_profiler binary, try running macOS"
		return
	fi

	# Check argument
	USAGE_STRING="system-profiler <data type (name only, no SP prefix or DataType suffix)>"
	[[ -z "${1}" ]] && output usage "${USAGE_STRING}" && return

	plist-to-json <(sudo system_profiler -xml "SP${1}DataType" 2> /dev/null | sed -E -e 's/\s{1,}<\//<\//g' -e 's/\ \ /\ /g') | sed -e 's/"attrib_Yes"/true/g' -e 's/"attrib_No"/false/g' -e 's/"attrib_On"/true/g' -e 's/"attrib_Off"/false/g' -e 's/"_items"/"items"/g' -e 's/"_name"/"name"/g' | jq -S '.[][].items'
}

# List formatted system_profiler data types
_macos_system_profiler_list() {
	>&2 output blue "Available data types:"
	>&2 echo
	sudo system_profiler -listDataTypes | grep -Ev 'Available\ Datatypes:' | sed -e 's/^SP//g' -e 's/DataType$//g' | sort -df
}

# E-Z copy file into pasteboard (clipboard)
_macos_pb_copy() {
	if [[ ! -s "${1}" ]]; then
		output error "'${1}' is not present or is empty"
		return 1
	fi

	set -o pipefail
	if ! pbcopy < "${1}"; then
		output error "Failed to copy contents of '${1}' to pasteboard"
		return 2
	fi
	set +o pipefail

	output keyval-t "Pasteboard filled with contents of" "${1}"
}


# EFI partition mount for disk0, disk1, and disk2
for NUM in {0..5}; do
	DSK="disk${NUM}s1"
	PATH_DSK="/dev/${DSK}"
	PATH_MNT="/Volumes/${DSK}"

	[[ ! -b "${PATH_DSK}" ]] && continue

	# shellcheck disable=SC2139
	# shellcheck disable=SC2140
	alias "efi-mount-${NUM}"="sudo mkdir ${PATH_MNT} && diskutil mount -mountPoint ${PATH_MNT} ${PATH_DSK} && cd ${PATH_MNT}"
done

# Fake lspci
if ! hash lspci > /dev/null 2>&1; then
	if hash dspci > /dev/null 2>&1; then
		alias lspci='dspci'
	fi
fi

# Fake lsusb
alias lsusb='_macos_lsusb'

# Clear font cache
if hash atsutil; then
	alias fix-fontcache='sudo atsutil databases -remove'
fi

# Lock screen and screensaver shortcuts
alias screen-off='  pmset displaysleepnow'
alias screen-lock=' /System/Library/CoreServices/Menu\ Extras/User.menu/Contents/Resources/CGSession -suspend'
alias screen-saver='open -a ScreenSaverEngine'

alias sleep-system="osascript -e 'tell app \"System Events\" to sleep'"


# 14 : Yosemite
# 15 : El Capitan
# 16 : Sierra
# 17 : High Sierra
# 18 : Mojave
case "${UNAME_KERNEL_RELEASE%%.*}" in
	1[4-5])
		# Fix disk permissions
		alias fix-diskperms="sudo repair_packages --repair --standard-pkgs /; sudo chown -R \${USER} /usr/local"
		;;
esac

case "${UNAME_KERNEL_RELEASE%%.*}" in
	1[1-4])
		# Flush DNS cache
		alias fix-dns="sudo killall -HUP mDNSResponder; echo | sudo tee -a /etc/hosts; sudo sed -i '$ d' /etc/hosts"
		alias fix-diskperms="sudo diskutil repairPermissions /; sudo chown -R \${USER} /usr/local"
		;;

	1[5-9]) ;&
	20)
		# Enable and disable indexing
		alias indexing-enable=' sudo mdutil -a -i on'
		alias indexing-disable='sudo mdutil -a -i off'

		# Flush DNS cache
		alias fix-dns="sudo dscacheutil -flushcache; sudo killall -HUP mDNSResponder; echo | sudo tee -a /etc/hosts > /dev/null; sudo sed -i '$ d' /etc/hosts"
	;;
esac


# Function aliases
alias copy='_macos_pb_copy'

alias hostname-macos='_macos_hostname'

alias itunes-control='_macos_itunes_control'

alias itunes='_macos_itunes'

alias net-listening='_macos_net_listening'

alias notify='      _macos_notify'
alias notify-macos='_macos_notify'

alias fix-office-2011='_macos_fix_office_2011'

alias scutil-set='_macos_scutil_set'

alias system-profiler='     _macos_system_profiler'
alias system-profiler-list='_macos_system_profiler_list'

alias volume='_macos_volume'


# vim: set filetype=sh ts=2 sw=2 tw=0 noet :
