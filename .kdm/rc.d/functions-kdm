# Functions: kdm-bash-env

[[ "${_}" != "${0}" && "${SOURCE_VERBOSE}" == "true" ]] && output keyval "Loaded" "${BASH_SOURCE[@]/$HOME\/\.kdm\//}"

# Get Git hash of bash-env
_kdm_hash() {
	# Declare vars as local
	local OLD_PWD

	OLD_PWD="${PWD}"
	cd "${HOME}" || return

	git log --pretty=format:'%h' -n 1
	cd "${OLD_PWD}" || return
}

# Help with/list bashrc functions
_kdm_help() {
	# Declare vars as local
	local BASHRC_CMDS

	output purple "kdm bash-env functions:"
	echo

	BASHRC_CMDS=($(grep -o 'alias\ .*.=' "${BASH_ENV_FILE_RC}" | sort -u | awk -F '[ =]' '{print $2}' | sort -u | sed -r '/^.{,3}$/d' | grep -Ev 'pign|tial|namp|mkdir|grep|grpe|ehco|clean|CMD|^config|^log|^html\-|^xml\-|^json\-|lsusb|md5sum'))

	# macOS commands
	if [[ "${UNAME_KERNEL_NAME}" == "Darwin" ]]; then
		for CMD in "${BASHRC_CMDS[@]}"; do
			echo "${CMD}"
		done | grep -Ev '^sys\-restart|^kvm\-'
	fi

	# Linux commands
	if [[ "${UNAME_KERNEL_NAME}" == "Linux" ]]; then
		for CMD in "${BASHRC_CMDS[@]}"; do
			echo "${CMD}"
		done | grep -Ev '^osx\-|^net\-listening|efi\-mount'
	fi
	echo
}

# Quick-draw pull bash env
_kdm_pull() {
	# Declare vars as local
	local CMD_EXIT OLD_PWD

	# Save current PWD
	OLD_PWD="${PWD}"
	cd "${HOME}" || return

	_g_gu
	CMD_EXIT="${?}"

	cd "${OLD_PWD}" || return
	return ${CMD_EXIT}
}

# Re-source ${HOME}/.kdm/rc, then files in the 'source' dir
# shellcheck disable=SC1090
_kdm_source() {
	# Declare vars as local
	local OLD_PWD SOURCE_FILE SOURCE_PATH

	OLD_PWD="${PWD}"
	cd "${BASH_ENV_DIR_KDM}" || return

	export SOURCE_VERBOSE="true"

	for i in {0..22}; do
		SOURCE_FILE="$(printf '%02d' "${i}")"
		SOURCE_PATH="$(ls "profile.d/${SOURCE_FILE}"-*)"
		[[ ! -s "${SOURCE_PATH}" ]] && continue
		if . "${SOURCE_PATH}"; then output keyval-t "Loaded" "${SOURCE_PATH}"; else output keyval-f "Failed" "${SOURCE_PATH}"; fi
	done

	unset SOURCE_VERBOSE

	cd "${OLD_PWD}" || return
	unset OLD_PWD
}

# Get timestamp of last bash-env commit from Git
_kdm_time() {
	# Declare vars as local
	local DATE_CMD GIT_SEC OLD_PWD

	OLD_PWD="${PWD}"
	cd "${HOME}" || return

	# Last commit UNIX seconds-since-epoch timestamp
	GIT_SEC="$(git log -1 --date=short --pretty=format:%ct)"

	# macOS date command is different when translating from seconds-since-epoch to date if the GNU utils aren't installed
	DATE_CMD=(date)
	[[ "${MACOS_GNU}" || "${UNAME_KERNEL_NAME}" == "Linux" ]] && DATE_CMD+=("--date=@${GIT_SEC}") || DATE_CMD+=(-j -r "${GIT_SEC}")
	DATE_CMD+=('+%a %b %0d %r')

	"${DATE_CMD[@]}"

	cd "${OLD_PWD}" || return
}


# vim: set syntax=sh filetype=sh ts=2 sw=2 tw=0 noet :
