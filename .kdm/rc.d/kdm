# Functions: kdm-bash-env

[[ "${_}" != "${0}" && "${SOURCE_VERBOSE}" == "true" ]] && output kv "Loaded" "${BASH_SOURCE[@]/$HOME\/\.kdm\//}"


# Get Git hash of bash-env
_kdm_hash() {
	# Declare vars as local
	local OLD_PWD

	OLD_PWD="${PWD}"
	cd "${HOME}" || return

	git log --pretty=format:'%h%n' -n 1
	cd "${OLD_PWD}" || return
}

# Help with/list bashrc functions
_kdm_help() {
	# Declare vars as local
	local BAR="${C_PRP}====================================${C_RST}"

	local ENV_CMD ENV_CMDS
	local ENV_CMD_GROUP_FMT ENV_CMD_GROUP_NEW ENV_CMD_GROUP_OLD

	mapfile -t ENV_CMDS < <(alias | grep -Ev '^alias\ g\-|ccd|cdc|clear|CMD|ehco|grep|grpe|it2|ls\ .*.\-\-|lsusb|markdown|md5sum|namp|pign|ping=|kk|vim|\.\.|showbin|ssh|sudo|tial|\-format=' | awk -F '[ =]' '{print $2}' | sed -r '/^.{,2}$/d')

	ENV_CMD_GROUP_OLD=""
	for ENV_CMD in "${ENV_CMDS[@]}"; do
		# Get 1st 4 letters of command
		ENV_CMD_GROUP_NEW="${ENV_CMD:0:4}"

		# If we've moved to a new group, add an extra newline
		if [[ "${ENV_CMD_GROUP_NEW}" != "${ENV_CMD_GROUP_OLD}" ]]; then
			ENV_CMD_GROUP_FMT="$(echo "${ENV_CMD:0:7}" | awk -F '-' '{printf $1}')"
			echo -e "\n ${BAR} ${C_GRY}'${C_GRN_BRT}${ENV_CMD_GROUP_FMT}${C_GRY}'${C_RST}"
		fi

		printf "${C_GRY}'${C_ORN}%s${C_GRY}'${C_RST}\n" "${ENV_CMD}"

		ENV_CMD_GROUP_OLD="${ENV_CMD_GROUP_NEW}"
	done
}

# Quick-draw pull bash env
_kdm_pull() {
	# Declare vars as local
	local CMD_EXIT OLD_PWD

	# Save current PWD
	OLD_PWD="${PWD}"
	cd "${HOME}" || return 1

	git checkout -- "${HOME}/.config/coc/extensions/package.json"
	_g_gu
	~/.config/coc/extensions/install

	CMD_EXIT="${?}"

	cd "${OLD_PWD}" || return 1
	return ${CMD_EXIT}
}

# Re-source ${HOME}/.kdm/rc, then files in the 'source' dir
# shellcheck disable=SC1090
_kdm_source() {
	# Declare vars as local
	local OLD_PWD
	local SOURCE_CLR SOURCE_FILE SOURCE_MSG SOURCE_PATH

	OLD_PWD="${PWD}"
	cd "${BASH_ENV_DIR_KDM}" || return

	# Quiet output
	[[ "${1}" != "-q" ]] && export SOURCE_VERBOSE="true"

	for i in {0..23}; do
		SOURCE_FILE="$(printf '%02d' "${i}")"
		SOURCE_PATH="$(ls "profile.d/${SOURCE_FILE}"-*)"
		[[ ! -s "${SOURCE_PATH}" ]] && continue

		# Quiet output
		[[ "${1}" == "-q" ]] && . "${SOURCE_PATH}" && continue

		SOURCE_CLR="f"
		SOURCE_MSG="Failed"

		if . "${SOURCE_PATH}"; then
			SOURCE_CLR="t"
			SOURCE_MSG="Loaded"
		fi

		output "kv${SOURCE_CLR}" "${SOURCE_MSG}" "${SOURCE_PATH}"
	done

	# Quiet output
	[[ "${1}" != "-q" ]] && unset SOURCE_VERBOSE

	cd "${OLD_PWD}" || return
	unset OLD_PWD
}

# Get timestamp of last bash-env commit from Git
_kdm_time() {
	# Declare vars as local
	local DATE_CMD GIT_SEC OLD_PWD

	OLD_PWD="${PWD}"
	cd "${HOME}" || return

	# Last commit UNIX seconds-since-epoch timestamp
	GIT_SEC="$(git log -1 --date=short --pretty=format:%ct)"

	# macOS date command is different when translating from seconds-since-epoch to date if the GNU utils aren't installed
	DATE_CMD=(date)
	[[ "${MACOS_GNU}" || "${UNAME_KERNEL_NAME}" == "Linux" ]] && DATE_CMD+=("--date=@${GIT_SEC}") || DATE_CMD+=(-j -r "${GIT_SEC}")
	DATE_CMD+=('+%a %b %0d %r')

	"${DATE_CMD[@]}"

	cd "${OLD_PWD}" || return
}


# Update Git submodule, but detach and return immediately (or close to immediately)
_kdm_update_submodule() {
	# Declare vars as local
	local DIR_SUBMODULE SUBMODULE

	SUBMODULE="${1}"

	DIR_SUBMODULE="${HOME}/${SUBMODULE}"
	cd "${DIR_SUBMODULE}" || return 2

	case "${2}" in
		pull)
			{
				git fetch --all --prune
				git checkout master
				git pull --prune
			} > /dev/null 2>&1

			output keyval-y "[kdm-update][subm][pull]" "${SUBMODULE}"
			;;

		gc)
			git gc --aggressive --prune > /dev/null 2>&1
			output keyval-y "[kdm-update][subm][ gc ]" "${SUBMODULE}"
			;;
		esac
}

# Update all Git submodules for kdm-bash-env (in a parallel-ish fashion)
_kdm_update() {
	# Declare vars as local
	local ARRAY_SUBMODULES DIR_SUBMODULE SUBMODULE OLD_PWD WAIT_COUNT
	local PERFORM_COC_UPDATE KDM_PUSH_YN
	local CORE_COUNT SUBMODULE_PROC_COUNT SUBMODULE_PROC_LIMIT

	OLD_PWD="${PWD}"

	# Change to home directory
	if ! cd; then
		output error "Unable to change to home directory"
		return 1
	fi

	{
		git fetch --all --prune
		git pull        --prune
	} > /dev/null 2>&1

	output keyval-g "[kdm-update][main]" "Pull complete"


	output keyval-y "[kdm-update][main]" "Begin submodule pull"

	# Determine half of CPU core count
	CORE_COUNT="$(nproc)"
	SUBMODULE_PROC_LIMIT="$((CORE_COUNT/2))"

	mapfile -t ARRAY_SUBMODULES < <(git submodule | awk '{print $2}')
	for SUBMODULE in "${ARRAY_SUBMODULES[@]}"; do
		# Wait to launch another Git process if number running Git processes exceeds half of CPU core count
		SUBMODULE_PROC_COUNT="$(pgrep -f 'git\ (checkout|fetch|gc|prune|pull|status|submodule)' | wc -l)"

		while [[ "${SUBMODULE_PROC_COUNT}" -ge "${SUBMODULE_PROC_LIMIT}" ]]; do
			output keyval-o "[kdm-update][subm][wait]" "${SUBMODULE}"
			sleep 1

			SUBMODULE_PROC_COUNT="$(pgrep -f 'git\ (checkout|fetch|gc|prune|pull|status|submodule)' | wc -l)"
		done

		_kdm_update_submodule "${SUBMODULE}" pull &
		sleep 0.1
	done
	echo

	# Wait for Git processes to complete
	WAIT_COUNT="0"
	WAIT_LIMIT="180"

	# Wait longer on slower CPUs
	CPU_MAX_MHZ="$(lscpu --extended=MAXMHZ --json | jq -r '.cpus[0].maxmhz' | awk -F '.' '{print $1}')"
	if [[ "${CPU_MAX_MHZ}" -le "2000" ]]; then
		WAIT_LIMIT="600"
	fi

	while pgrep -f 'git\ (checkout|fetch|gc|prune|pull|status|submodule)' > /dev/null 2>&1; do
		if [[ "${WAIT_COUNT}" -gt "${WAIT_LIMIT}" ]]; then
			output error "Waiting for submodule pull to complete took too long"
			return 3
		fi

		if [[ "$((WAIT_COUNT%15))" == "0" ]]; then
			output keyval-r "[kdm-update][main]" "Waited on submodule pull for ${WAIT_COUNT} seconds"
		fi

		sleep 1

		((WAIT_COUNT++))
	done

	output keyval-g "[kdm-update][main]" "Submodule pull complete"

	output keyval-c "[kdm-update][main]" "Submodule status"
	git submodule
	echo

	output keyval-c "[kdm-update][main]" "Repo status"
	git status
	echo


	# Run coc extension update/rebuild/reinstall if coc.nvim submodule was updated, or if --force argument is provided
	PERFORM_COC_UPDATE="false"
	if git status --no-renames --untracked-files=no --porcelain 2> /dev/null | grep -Eq 'coc\.nvim$'; then
		PERFORM_COC_UPDATE="true"
	fi

	if [[ "${1}" == "--force" ]]; then
		PERFORM_COC_UPDATE="true"
	fi

	if [[ "${PERFORM_COC_UPDATE}" == "true" ]]; then
		output keyval-y "[kdm-update][main]" "Begin coc update script"

		COC_UPDATE="${HOME}/.config/coc/extensions/update"
		[[ -s "${COC_UPDATE}" && -x "${COC_UPDATE}" ]] && "${COC_UPDATE}"

		output keyval-g "[kdm-update][main]" "coc update script complete"
	fi


	# Push changes if kdm-edit is present
	if [[ -s "${HOME}/.kdm/extra/kdm-edit" ]]; then
		read -r -p "Execute kdm-push? [Y/n] " KDM_PUSH_YN

		if [[ "${KDM_PUSH_YN}" != [Nn] ]]; then
			output keyval-y "[kdm-update][main]" "Begin kdm-push"
			sleep 1

		# shellcheck disable=SC1091
		. "${HOME}/.kdm/extra/kdm-edit"
		_kdm_push

		output keyval-g "[kdm-update][main]" "kdm-push complete"
		fi
	fi


	output keyval-y "[kdm-update][main]" "Begin submodule garbage collection"

	mapfile -t ARRAY_SUBMODULES < <(git submodule | awk '{print $2}')
	for SUBMODULE in "${ARRAY_SUBMODULES[@]}"; do
		# Wait to launch another Git process if number running Git processes exceeds half of CPU core count
		SUBMODULE_PROC_COUNT="$(pgrep -f 'git\ (checkout|fetch|gc|prune|pull|status|submodule)' | wc -l)"

		while [[ "${SUBMODULE_PROC_COUNT}" -ge "${SUBMODULE_PROC_LIMIT}" ]]; do
			output keyval-o "[kdm-update][subm][wait]" "${SUBMODULE}"
			sleep 1
			SUBMODULE_PROC_COUNT="$(pgrep -f 'git\ (checkout|fetch|gc|prune|pull|status|submodule)' | wc -l)"
		done

		_kdm_update_submodule "${SUBMODULE}" gc &
		sleep 0.1
	done
	echo

	# Wait for Git processes to complete
	WAIT_COUNT="0"
	while pgrep -f 'git\ (checkout|fetch|gc|prune|pull|status|submodule)' > /dev/null 2>&1; do
		if [[ "${WAIT_COUNT}" -gt "${WAIT_LIMIT}" ]]; then
			output error "Waiting for submodule garbage collection to complete took too long"
			return 4
		fi

		if [[ "$((WAIT_COUNT%15))" == "0" ]]; then
			output keyval-r "[kdm-update][main]" "Waited on submodule garbage collection for ${WAIT_COUNT} seconds"
		fi

		sleep 1

		((WAIT_COUNT++))
	done

	output keyval-g "[kdm-update][main]" "Submodule pull complete"


	output keyval-y "[kdm-update][main]" "Garbage collection"
	git gc --aggressive --prune > /dev/null 2>&1

	# Change back to original pwd
	if ! cd "${OLD_PWD}"; then
		output error "Unable to change back to old pwd '${OLD_PWD}'"
		return 5
	fi

	output keyval-g "[kdm-update][main]" "Complete"
	return 0
}


# Function aliases
alias kdm-hash='  _kdm_hash'
alias kdm-help='  _kdm_help'
alias kdm-pull='  _kdm_pull'
alias kdm-source='_kdm_source'
alias kdm-time='  _kdm_time'
alias kdm-update='_kdm_update'


# vim: set filetype=sh ts=2 sw=2 tw=0 noet :
