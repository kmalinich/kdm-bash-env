# Functions: Net

[[ "${_}" != "${0}" && "${SOURCE_VERBOSE}" == "true" ]] && output kv "Loaded" "${BASH_SOURCE[@]/$HOME\/\.kdm\//}"


# Network config information
_net_info() {
	if hash hostname; then
		output kv "hostname   " "$(hostname)"
		output kv "hostname -s" "$(hostname -s)"
		[[ "${UNAME_KERNEL_NAME}" == "Linux" ]] && output kv "hostname -d" "$(hostname -d)"
		output kv "hostname -f" "$(hostname -f)"
		echo
	fi

	if hash ifconfig; then
		output purple "ifconfig:"
		ifconfig
		echo
	fi

	if hash netstat; then
		output purple "netstat -nr:"
		netstat -nr
		echo
	fi

	if [[ -s /etc/resolv.conf ]]; then
		output purple "resolv.conf:"
		cat /etc/resolv.conf
		echo
	fi

	if hash ip; then
		output purple "ip route show:"
		ip route show
		echo

		output purple "ip addr show ${DEFROUTE_NIC}:"
		ip addr show "${DEFROUTE_NIC}"
		echo
	fi
}


# Formats MAC address for all eventualities
_net_mac() {
	# Declare vars as local
	local CLEAN_MAC COLONS_LOWER COLONS_UPPER DASHES_LOWER DASHES_UPPER NONE_LOWER NONE_UPPER PF_FMT SPACES_LOWER SPACES_UPPER USAGE_STRING

	# Quit if nothing is entered
	USAGE_STRING="net-mac <MAC address, any format>"
	[[ -z "${1}" ]] && output usage "${USAGE_STRING}" && return

	# Strip MAC of anything other than 0-9, a-f, and A-F
	CLEAN_MAC="${1//[^a-fA-F0-9 ]/}"

	# Check the length of the cleaned MAC address. It should be 12 characters.
	[[ "${#CLEAN_MAC}" != "12" ]] && output error "'${1}' is invalid ('${CLEAN_MAC}' after sanitizing)" && return

	# If the MAC entered is kosher, build out the variables
	# Lowercase
	NONE_LOWER="${CLEAN_MAC,,}"
	COLONS_LOWER=$(echo "${NONE_LOWER}" | sed -e 's/\([0-9A-Fa-f]\{2\}\)/\1:/g' -e 's/\(.*\):$/\1/')
	DASHES_LOWER=$(echo "${NONE_LOWER}" | sed -e 's/\([0-9A-Fa-f]\{2\}\)/\1-/g' -e 's/\(.*\)-$/\1/')
	SPACES_LOWER=$(echo "${NONE_LOWER}" | sed -e 's/\([0-9A-Fa-f]\{2\}\)/\1 /g' -e 's/\(.*\) $/\1/')

	# Uppercase
	NONE_UPPER="${CLEAN_MAC^^}"
	COLONS_UPPER=$(echo "${NONE_UPPER}" | sed -e 's/\([0-9A-Fa-f]\{2\}\)/\1:/g' -e 's/\(.*\):$/\1/')
	DASHES_UPPER=$(echo "${NONE_UPPER}" | sed -e 's/\([0-9A-Fa-f]\{2\}\)/\1-/g' -e 's/\(.*\)-$/\1/')
	SPACES_UPPER=$(echo "${NONE_UPPER}" | sed -e 's/\([0-9A-Fa-f]\{2\}\)/\1 /g' -e 's/\(.*\) $/\1/')

	# Set margin for printf commands
	PF_FMT="${C_PRP}%-10s${C_RST}%-20s%s\\n"

	# Output MAC address in various formats
	output purple "------------------------------ Formatted MAC --"
	printf "${PF_FMT}" "Colons" "${COLONS_LOWER}" "${COLONS_UPPER}"
	printf "${PF_FMT}" "Dashes" "${DASHES_LOWER}" "${DASHES_UPPER}"
	printf "${PF_FMT}" "Spaces" "${SPACES_LOWER}" "${SPACES_UPPER}"
	printf "${PF_FMT}" "None"   "${NONE_LOWER}"   "${NONE_UPPER}"

	# Perform IEEE MAC lookup
	echo
	_net_mac_lookup "${COLONS_LOWER}"
}

# Look up MAC address against IEEE database
_net_mac_lookup() {
	# Declare vars as local
	local IEEE_ADDRESS IEEE_COMPANY IEEE_COUNTRY IEEE_STRING PF_FMT USAGE_STRING

	# Check if oui npm package is installed
	! hash oui && output error "oui not available" && return

	USAGE_STRING="net-mac-lookup <MAC address with colons [at least first 3 octets]>"
	[[ -z "${1}" ]] && output usage "${USAGE_STRING}" && return

	IEEE_STRING="$(oui "${1}" | sed 's/,/ /g' | sed 's/  / /g' | sed ':a;N;$!ba;s/\n/,/g')"

	IEEE_COMPANY="$(echo "${IEEE_STRING}" | awk -F ',' '{print $1}')"
	IEEE_ADDRESS="$(echo "${IEEE_STRING}" | awk -F ',' '{print $2 ", " $3}')"
	IEEE_COUNTRY="$(echo "${IEEE_STRING}" | awk -F ',' '{print $4}')"

	PF_FMT="${C_PRP}%-10s${C_RST}%s\\n"

	output purple "-------------------------------- IEEE lookup --"
	printf "${PF_FMT}" "Company" "${IEEE_COMPANY}"
	printf "${PF_FMT}" "Address" "${IEEE_ADDRESS}"
	printf "${PF_FMT}" "Country" "${IEEE_COUNTRY}"
}


# Search a subnet for IPs that respond to ICMP
_net_ping_subnet() {
	# Declare vars as local
	local USAGE_STRING

	USAGE_STRING="net-ping-subnet <CIDR range>"
	[[ -z "${1}" ]] && output usage "${USAGE_STRING}" && return

	# Return if fping is missing
	! hash fping && output error "fping not available" && return

	output purple "Pinging subnet '${1}'"

	# Sort by IP octets
	fping \
		--alive       \
		--interval=10 \
		--period=20   \
		--retry=1     \
		--timeout=250 \
		--generate "${1}" 2> /dev/null \
		| sort --field-separator="." --key="1,1g" --key="2,2g" --key="3,3g" --key="4,4g"
}


# Python webserver
_net_webserver() {
	# Declare vars as local
	local ARRAY_USAGE_OPTIONS USAGE_OPTIONS_STRING USAGE_STRING WEBSERVER_PID WEBSERVER_PORT

	# Array of options
	ARRAY_USAGE_OPTIONS=(
	start
	stop
	)

	# Create variable of pipe-separated options from array
	USAGE_OPTIONS_STRING="$(IFS=$'|'; echo "${ARRAY_USAGE_OPTIONS[*]}")"

	USAGE_STRING="net-webserver <${USAGE_OPTIONS_STRING}>"
	[[ -z "${1}" ]] && output usage "${USAGE_STRING}" && return

	WEBSERVER_PID="$(pgrep -U "${UID}" -f 'ComplexHTTPServer' 2> /dev/null)"

	WEBSERVER_PORT="8192"

	case "${1}" in
		start)
			if [[ "${WEBSERVER_PID}" ]]; then
				output cyan "Webserver already running (PID ${WEBSERVER_PID})"
				return
			fi

			# Check if ComplexHTTPServer is installed
			if ! pip3 show ComplexHTTPServer > /dev/null 2>&1; then
				output error "Python3 module 'ComplexHTTPServer' is not installed (try 'pip3 install ComplexHTTPServer')"
				return
			fi

			# Start webserver
			{ python3 -m ComplexHTTPServer "${WEBSERVER_PORT}" &> /dev/null & disown; }

			WEBSERVER_PID="$(pgrep -U "${UID}" -f 'ComplexHTTPServer' 2> /dev/null)"

			output green "Webserver started (PID ${WEBSERVER_PID}) on port ${WEBSERVER_PORT}, serving directory '${PWD}'"
			;;

		stop)
			if [[ -z "${WEBSERVER_PID}" ]]; then
				output yellow "Webserver not running"
				return
			fi

			if ! kill -9 "${WEBSERVER_PID}" 2> /dev/null; then
				output error "Failed to kill -9 webserver (PID ${WEBSERVER_PID})"
				return
			fi

			output red "Webserver (PID ${WEBSERVER_PID}) stopped"
			;;
	esac
}


# Function aliases
alias net-info='       _net_info'
alias net-mac='        _net_mac'
alias net-mac-lookup=' _net_mac_lookup'
alias net-ping-subnet='_net_ping_subnet'
alias net-webserver='  _net_webserver'


# vim: set filetype=sh ts=2 sw=2 tw=0 noet :
