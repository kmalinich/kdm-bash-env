# Functions: SSH aliases

[[ "${_}" != "${0}" && "${SOURCE_VERBOSE}" == "true" ]] && output kv "Loaded" "${BASH_SOURCE[@]/${HOME}\/\.kdm\//}"


# Generate SSH host aliases
_sshAliasGenerate() {
	# Clear SSH alias cache file
	: > "${BASH_ENV_FILE_CACHE_SSH_ALIAS}"

	# Process SSH host alias generation, output to SSH alias cache file
	awk -F ' ' '/^Host(\s){1,29}[a-z].*/ {print "alias " $2 "='"'"'ssh " $2 "'"'"'"}' "${BASH_ENV_DIR_SSH_CONFIG}"/*.conf     2> /dev/null | grep -Ev '\*' >> "${BASH_ENV_FILE_CACHE_SSH_ALIAS}" 2> /dev/null
	awk -F ' ' '/^Host(\s){1,29}[a-z].*/ {print "alias " $2 "='"'"'ssh " $2 "'"'"'"}' "${BASH_ENV_DIR_SSH_CONFIG}"/*.d/*.conf 2> /dev/null | grep -Ev '\*' >> "${BASH_ENV_FILE_CACHE_SSH_ALIAS}" 2> /dev/null

	# Output message if output function available and in a TTY
	if hash output; then
		[[ -n "${BASH_INTERACTIVE}" && "${SOURCE_VERBOSE}" != "true" ]] && output kvt "Generated" "SSH aliases"
	fi

	# Source SSH alias cache file
	. "${BASH_ENV_FILE_CACHE_SSH_ALIAS}"
}

# Configure SSH host aliases
_sshAliasSetup() {
	# Generate SSH alias cache file if empty
	if [[ ! -s "${BASH_ENV_FILE_CACHE_SSH_ALIAS}" ]]; then
		_sshAliasGenerate
		# If generation required, we're done here
		return 0
	fi

	# Declare vars as local
	local SSH_ALIAS_CACHE_AGE SSH_ALIAS_CACHE_TIME

	# Determine age of SSH alias cache file
	if [[ -n "${MACOS_GNU}" || "${UNAME_KERNEL_NAME}" == "Linux" ]]; then
		SSH_ALIAS_CACHE_TIME=$(stat -c '%Y' "${BASH_ENV_FILE_CACHE_SSH_ALIAS}")
	else
		SSH_ALIAS_CACHE_TIME=$(stat -f '%m' "${BASH_ENV_FILE_CACHE_SSH_ALIAS}")
	fi

	SSH_ALIAS_CACHE_AGE=$(($(date +%s)-SSH_ALIAS_CACHE_TIME))

	# Regenerate SSH alias cache file if older than 1 day
	if [[ "${SSH_ALIAS_CACHE_AGE}" -ge "86400" ]]; then
		_sshAliasGenerate
		return 0
	fi

	# Source SSH alias cache file
	. "${BASH_ENV_FILE_CACHE_SSH_ALIAS}"
}


# Execute SSH alias setup
_sshAliasSetup

# Function aliases
alias ssh-alias-generate='_sshAliasGenerate'


# vim: set filetype=sh ts=2 sw=2 tw=0 noet :
