[alias]
	a  = add
	af = add -f

	b   = branch
	ba  = branch -a
	bd  = branch -d
	bdd = branch -D
	bm  = branch --merged
	bnm = branch --no-merged

	cl  = clone -j8 --recursive --depth 1 --shallow-submodules
	cld = clone -j8 --recursive

	co  = checkout
	cob = checkout -b
	com = checkout master

	c   = commit
	ca  = commit -a
	cam = commit -a -m

	cp = "!cp() { git cam 'Update'; }; cp"

	d  = diff --color=auto --ignore-space-change --ignore-blank-lines --color-moved-ws=ignore-all-space --ws-error-highlight=all
	ds = describe

	# Delete any branches that have been merged into master
	# See also: https://gist.github.com/robmiller/5133264
	dm = "!dm() { git up && git bm | grep -v '\\*' | xargs -n 1 git bd 2> /dev/null; }; dm"

	f = fetch --all --prune

	# Fix upstream
	fu = "!fu() { BRANCH=\"$(git get-branch 2> /dev/null)\"; [[ -z "${BRANCH}" ]] && echo \"Error : No branch detected\" && return; BRANCH_UPSTREAM=\"origin/${BRANCH}\"; git b \"--set-upstream-to=${BRANCH_UPSTREAM}\" \"${BRANCH}\"; echo \"Set upstream to\" \"${BRANCH_UPSTREAM}\"; }; fu"

	get-branch  = symbolic-ref --short HEAD
	get-commit  = rev-parse HEAD
	get-gitdir  = rev-parse --git-dir
	get-repodir = rev-parse --show-toplevel
	get-tags    = describe --tags
	get-url     = config remote.origin.url

	l  = log

	# Maybe add commit URL, example: https://github.com/kmalinich/node-bmw-client/commit/ab657ff5cfb3cf190ab3fd9699ff30fd365c5b4f
	ll = log --pretty='tformat:[ %C(yellow)%h%C(reset) ] [ %C(blue)%aI%C(reset) ] [ %C(red)%><(15)%an%C(reset) ] %C(cyan)%s%C(reset)'

	m = merge

	# Requires GitHub CLI (https://hub.github.com/)
	o = browse

	pl  = pull
	plm = "!plm() { git f; git com; git plp; git s; }; plm"
	plp = pull --prune
	plu = "!plu() { git f; git com; git up; }; plu"

	ps   = push
	psvo = push --verbose origin

	# Requires GitHub CLI (https://hub.github.com/)
	pr = !bash -c 'hub pull-request $0 $@'
	# pr = "!pr() { hub pull-request $0 $@; }; pr"

	prune = fetch --all --prune

	r  = reset
	rh = reset --hard HEAD

	s = status

	sm   = submodule
	smf  = submodule foreach --recursive
	smi  = submodule update  --recursive --init
	smup = "!smup() { git f; git up; git smf 'BAR=\"=---------------------------------------------=\"; echo \"${BAR}\"; git plu; echo \"${BAR}\\n\\n\"'; }; smup"

	undo = checkout --

	up = pull --rebase --prune


# vim: set filetype=gitconfig ts=2 sw=2 tw=0 noet :
